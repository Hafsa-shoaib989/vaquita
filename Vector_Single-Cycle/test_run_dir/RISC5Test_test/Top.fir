;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<32>, out : SInt<32>}
    
    reg reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[PC.scala 11:18]
    io.out <= reg @[PC.scala 12:8]
    reg <= io.in @[PC.scala 13:5]
    
  module Program_Counter : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[PC4.scala 11:8]
    node _io_out_T = add(io.pc, UInt<32>("h04")) @[PC4.scala 12:17]
    node _io_out_T_1 = tail(_io_out_T, 1) @[PC4.scala 12:17]
    io.out <= _io_out_T_1 @[PC4.scala 12:8]
    
  module InstMem1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, data : UInt<32>}
    
    cmem imem : UInt<32>[1024] @[INST_MEM.scala 17:16]
    node _io_data_T = bits(io.addr, 9, 0) @[INST_MEM.scala 20:17]
    infer mport io_data_MPORT = imem[_io_data_T], clock @[INST_MEM.scala 20:17]
    io.data <= io_data_MPORT @[INST_MEM.scala 20:9]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, flip rs1_no : UInt<5>, flip rd_no : UInt<5>, mem_write : UInt<1>, branch : UInt<1>, mem_read : UInt<1>, reg_write : UInt<1>, men_to_reg : UInt<1>, alu_operation : UInt<4>, operand_A : UInt<3>, operand_B : UInt<2>, extend : UInt<2>, next_pc_sel : UInt<2>, avl_ope : UInt<2>, is_I : UInt<1>, is_V : UInt<1>}
    
    io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 28:15]
    node _T = eq(io.opcode, UInt<6>("h033")) @[CONTROL.scala 30:18]
    when _T : @[CONTROL.scala 30:29]
      io.mem_write <= UInt<1>("h00") @[CONTROL.scala 31:18]
      io.branch <= UInt<1>("h00") @[CONTROL.scala 32:15]
      io.mem_read <= UInt<1>("h00") @[CONTROL.scala 33:17]
      io.reg_write <= UInt<1>("h01") @[CONTROL.scala 34:18]
      io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 35:19]
      io.alu_operation <= UInt<1>("h00") @[CONTROL.scala 36:22]
      io.operand_A <= UInt<1>("h00") @[CONTROL.scala 37:18]
      io.operand_B <= UInt<1>("h00") @[CONTROL.scala 38:18]
      io.extend <= UInt<1>("h00") @[CONTROL.scala 39:15]
      io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 40:20]
      io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 41:16]
      io.is_I <= UInt<1>("h01") @[CONTROL.scala 42:13]
      io.is_V <= UInt<1>("h00") @[CONTROL.scala 43:13]
      skip @[CONTROL.scala 30:29]
    else : @[CONTROL.scala 45:35]
      node _T_1 = eq(io.opcode, UInt<5>("h013")) @[CONTROL.scala 45:24]
      when _T_1 : @[CONTROL.scala 45:35]
        io.mem_write <= UInt<1>("h00") @[CONTROL.scala 46:18]
        io.branch <= UInt<1>("h00") @[CONTROL.scala 47:15]
        io.mem_read <= UInt<1>("h00") @[CONTROL.scala 48:17]
        io.reg_write <= UInt<1>("h01") @[CONTROL.scala 49:18]
        io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 50:19]
        io.alu_operation <= UInt<1>("h01") @[CONTROL.scala 51:22]
        io.operand_A <= UInt<1>("h00") @[CONTROL.scala 52:18]
        io.operand_B <= UInt<1>("h01") @[CONTROL.scala 53:18]
        io.extend <= UInt<1>("h00") @[CONTROL.scala 54:15]
        io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 55:20]
        io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 56:16]
        io.is_I <= UInt<1>("h01") @[CONTROL.scala 57:13]
        io.is_V <= UInt<1>("h00") @[CONTROL.scala 58:13]
        skip @[CONTROL.scala 45:35]
      else : @[CONTROL.scala 60:35]
        node _T_2 = eq(io.opcode, UInt<6>("h023")) @[CONTROL.scala 60:24]
        when _T_2 : @[CONTROL.scala 60:35]
          io.mem_write <= UInt<1>("h01") @[CONTROL.scala 61:18]
          io.branch <= UInt<1>("h00") @[CONTROL.scala 62:15]
          io.mem_read <= UInt<1>("h00") @[CONTROL.scala 63:17]
          io.reg_write <= UInt<1>("h00") @[CONTROL.scala 64:18]
          io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 65:19]
          io.alu_operation <= UInt<3>("h05") @[CONTROL.scala 66:22]
          io.operand_A <= UInt<1>("h00") @[CONTROL.scala 67:18]
          io.operand_B <= UInt<1>("h01") @[CONTROL.scala 68:18]
          io.extend <= UInt<1>("h01") @[CONTROL.scala 69:15]
          io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 70:20]
          io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 71:16]
          io.is_I <= UInt<1>("h01") @[CONTROL.scala 72:13]
          io.is_V <= UInt<1>("h00") @[CONTROL.scala 73:13]
          skip @[CONTROL.scala 60:35]
        else : @[CONTROL.scala 75:34]
          node _T_3 = eq(io.opcode, UInt<2>("h03")) @[CONTROL.scala 75:24]
          when _T_3 : @[CONTROL.scala 75:34]
            io.mem_write <= UInt<1>("h00") @[CONTROL.scala 76:18]
            io.branch <= UInt<1>("h00") @[CONTROL.scala 77:15]
            io.mem_read <= UInt<1>("h01") @[CONTROL.scala 78:17]
            io.reg_write <= UInt<1>("h01") @[CONTROL.scala 79:18]
            io.men_to_reg <= UInt<1>("h01") @[CONTROL.scala 80:19]
            io.alu_operation <= UInt<3>("h04") @[CONTROL.scala 81:22]
            io.operand_A <= UInt<1>("h00") @[CONTROL.scala 82:18]
            io.operand_B <= UInt<1>("h01") @[CONTROL.scala 83:18]
            io.extend <= UInt<1>("h00") @[CONTROL.scala 84:15]
            io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 85:20]
            io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 86:16]
            io.is_I <= UInt<1>("h01") @[CONTROL.scala 87:13]
            io.is_V <= UInt<1>("h00") @[CONTROL.scala 88:13]
            skip @[CONTROL.scala 75:34]
          else : @[CONTROL.scala 90:35]
            node _T_4 = eq(io.opcode, UInt<7>("h063")) @[CONTROL.scala 90:24]
            when _T_4 : @[CONTROL.scala 90:35]
              io.mem_write <= UInt<1>("h00") @[CONTROL.scala 91:18]
              io.branch <= UInt<1>("h01") @[CONTROL.scala 92:15]
              io.mem_read <= UInt<1>("h00") @[CONTROL.scala 93:17]
              io.reg_write <= UInt<1>("h00") @[CONTROL.scala 94:18]
              io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 95:19]
              io.alu_operation <= UInt<2>("h02") @[CONTROL.scala 96:22]
              io.operand_A <= UInt<1>("h00") @[CONTROL.scala 97:18]
              io.operand_B <= UInt<1>("h00") @[CONTROL.scala 98:18]
              io.extend <= UInt<1>("h00") @[CONTROL.scala 99:15]
              io.next_pc_sel <= UInt<1>("h01") @[CONTROL.scala 100:20]
              io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 101:16]
              io.is_I <= UInt<1>("h01") @[CONTROL.scala 102:13]
              io.is_V <= UInt<1>("h00") @[CONTROL.scala 103:13]
              skip @[CONTROL.scala 90:35]
            else : @[CONTROL.scala 105:36]
              node _T_5 = eq(io.opcode, UInt<7>("h06f")) @[CONTROL.scala 105:24]
              when _T_5 : @[CONTROL.scala 105:36]
                io.mem_write <= UInt<1>("h00") @[CONTROL.scala 106:18]
                io.branch <= UInt<1>("h00") @[CONTROL.scala 107:15]
                io.mem_read <= UInt<1>("h00") @[CONTROL.scala 108:17]
                io.reg_write <= UInt<1>("h01") @[CONTROL.scala 109:18]
                io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 110:19]
                io.alu_operation <= UInt<2>("h03") @[CONTROL.scala 111:22]
                io.operand_A <= UInt<1>("h01") @[CONTROL.scala 112:18]
                io.operand_B <= UInt<1>("h00") @[CONTROL.scala 113:18]
                io.extend <= UInt<1>("h00") @[CONTROL.scala 114:15]
                io.next_pc_sel <= UInt<2>("h02") @[CONTROL.scala 115:20]
                io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 116:16]
                io.is_I <= UInt<1>("h01") @[CONTROL.scala 117:13]
                io.is_V <= UInt<1>("h00") @[CONTROL.scala 118:13]
                skip @[CONTROL.scala 105:36]
              else : @[CONTROL.scala 120:36]
                node _T_6 = eq(io.opcode, UInt<7>("h067")) @[CONTROL.scala 120:24]
                when _T_6 : @[CONTROL.scala 120:36]
                  io.mem_write <= UInt<1>("h00") @[CONTROL.scala 121:18]
                  io.branch <= UInt<1>("h00") @[CONTROL.scala 122:15]
                  io.mem_read <= UInt<1>("h00") @[CONTROL.scala 123:17]
                  io.reg_write <= UInt<1>("h01") @[CONTROL.scala 124:18]
                  io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 125:19]
                  io.alu_operation <= UInt<2>("h03") @[CONTROL.scala 126:22]
                  io.operand_A <= UInt<1>("h01") @[CONTROL.scala 127:18]
                  io.operand_B <= UInt<1>("h00") @[CONTROL.scala 128:18]
                  io.extend <= UInt<1>("h00") @[CONTROL.scala 129:15]
                  io.next_pc_sel <= UInt<2>("h03") @[CONTROL.scala 130:20]
                  io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 131:16]
                  io.is_I <= UInt<1>("h01") @[CONTROL.scala 132:13]
                  io.is_V <= UInt<1>("h00") @[CONTROL.scala 133:13]
                  skip @[CONTROL.scala 120:36]
                else : @[CONTROL.scala 135:35]
                  node _T_7 = eq(io.opcode, UInt<6>("h037")) @[CONTROL.scala 135:24]
                  when _T_7 : @[CONTROL.scala 135:35]
                    io.mem_write <= UInt<1>("h00") @[CONTROL.scala 136:18]
                    io.branch <= UInt<1>("h00") @[CONTROL.scala 137:15]
                    io.mem_read <= UInt<1>("h00") @[CONTROL.scala 138:17]
                    io.reg_write <= UInt<1>("h01") @[CONTROL.scala 139:18]
                    io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 140:19]
                    io.alu_operation <= UInt<3>("h06") @[CONTROL.scala 141:22]
                    io.operand_A <= UInt<2>("h03") @[CONTROL.scala 142:18]
                    io.operand_B <= UInt<1>("h01") @[CONTROL.scala 143:18]
                    io.extend <= UInt<2>("h02") @[CONTROL.scala 144:15]
                    io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 145:20]
                    io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 146:16]
                    io.is_I <= UInt<1>("h01") @[CONTROL.scala 147:13]
                    io.is_V <= UInt<1>("h00") @[CONTROL.scala 148:13]
                    skip @[CONTROL.scala 135:35]
                  else : @[CONTROL.scala 150:35]
                    node _T_8 = eq(io.opcode, UInt<5>("h017")) @[CONTROL.scala 150:24]
                    when _T_8 : @[CONTROL.scala 150:35]
                      io.mem_write <= UInt<1>("h00") @[CONTROL.scala 151:18]
                      io.branch <= UInt<1>("h00") @[CONTROL.scala 152:15]
                      io.mem_read <= UInt<1>("h00") @[CONTROL.scala 153:17]
                      io.reg_write <= UInt<1>("h01") @[CONTROL.scala 154:18]
                      io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 155:19]
                      io.alu_operation <= UInt<3>("h07") @[CONTROL.scala 156:22]
                      io.operand_A <= UInt<2>("h02") @[CONTROL.scala 157:18]
                      io.operand_B <= UInt<1>("h01") @[CONTROL.scala 158:18]
                      io.extend <= UInt<2>("h02") @[CONTROL.scala 159:15]
                      io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 160:20]
                      io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 161:16]
                      io.is_I <= UInt<1>("h01") @[CONTROL.scala 162:13]
                      io.is_V <= UInt<1>("h00") @[CONTROL.scala 163:13]
                      skip @[CONTROL.scala 150:35]
                    else : @[CONTROL.scala 165:35]
                      node _T_9 = eq(io.opcode, UInt<7>("h057")) @[CONTROL.scala 165:24]
                      when _T_9 : @[CONTROL.scala 165:35]
                        io.mem_write <= UInt<1>("h00") @[CONTROL.scala 166:18]
                        io.branch <= UInt<1>("h00") @[CONTROL.scala 167:15]
                        io.mem_read <= UInt<1>("h00") @[CONTROL.scala 168:17]
                        io.reg_write <= UInt<1>("h01") @[CONTROL.scala 169:18]
                        io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 170:19]
                        io.alu_operation <= UInt<4>("h08") @[CONTROL.scala 171:22]
                        io.operand_A <= UInt<3>("h04") @[CONTROL.scala 172:18]
                        io.operand_B <= UInt<2>("h02") @[CONTROL.scala 173:18]
                        io.extend <= UInt<1>("h00") @[CONTROL.scala 174:15]
                        io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 175:20]
                        io.is_I <= UInt<1>("h00") @[CONTROL.scala 176:13]
                        io.is_V <= UInt<1>("h01") @[CONTROL.scala 177:13]
                        node _T_10 = neq(io.rs1_no, UInt<1>("h00")) @[CONTROL.scala 179:21]
                        when _T_10 : @[CONTROL.scala 179:30]
                          io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 180:20]
                          skip @[CONTROL.scala 179:30]
                        else : @[CONTROL.scala 181:57]
                          node _T_11 = eq(io.rs1_no, UInt<1>("h00")) @[CONTROL.scala 181:28]
                          node _T_12 = neq(io.rd_no, UInt<1>("h00")) @[CONTROL.scala 181:48]
                          node _T_13 = and(_T_11, _T_12) @[CONTROL.scala 181:36]
                          when _T_13 : @[CONTROL.scala 181:57]
                            io.avl_ope <= UInt<1>("h01") @[CONTROL.scala 182:20]
                            skip @[CONTROL.scala 181:57]
                          else : @[CONTROL.scala 183:57]
                            node _T_14 = eq(io.rs1_no, UInt<1>("h00")) @[CONTROL.scala 183:28]
                            node _T_15 = eq(io.rd_no, UInt<1>("h00")) @[CONTROL.scala 183:48]
                            node _T_16 = and(_T_14, _T_15) @[CONTROL.scala 183:36]
                            when _T_16 : @[CONTROL.scala 183:57]
                              io.avl_ope <= UInt<2>("h02") @[CONTROL.scala 184:20]
                              skip @[CONTROL.scala 183:57]
                            else : @[CONTROL.scala 185:17]
                              io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 186:20]
                              skip @[CONTROL.scala 185:17]
                        skip @[CONTROL.scala 165:35]
                      else : @[CONTROL.scala 190:13]
                        io.mem_write <= UInt<1>("h00") @[CONTROL.scala 191:18]
                        io.branch <= UInt<1>("h00") @[CONTROL.scala 192:15]
                        io.mem_read <= UInt<1>("h00") @[CONTROL.scala 193:17]
                        io.reg_write <= UInt<1>("h00") @[CONTROL.scala 194:18]
                        io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 195:19]
                        io.alu_operation <= UInt<1>("h00") @[CONTROL.scala 196:22]
                        io.operand_A <= UInt<1>("h00") @[CONTROL.scala 197:18]
                        io.operand_B <= UInt<1>("h00") @[CONTROL.scala 198:18]
                        io.extend <= UInt<1>("h00") @[CONTROL.scala 199:15]
                        io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 200:20]
                        io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 201:16]
                        io.is_I <= UInt<1>("h00") @[CONTROL.scala 202:13]
                        io.is_V <= UInt<1>("h00") @[CONTROL.scala 203:13]
                        skip @[CONTROL.scala 190:13]
    
  module Immde : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc : UInt<32>, I_type : SInt<32>, S_type : SInt<32>, SB_type : SInt<32>, U_type : SInt<32>, UJ_type : SInt<32>}
    
    node _io_I_type_T = bits(io.instr, 31, 31) @[IMMEDIATE.scala 18:35]
    node _io_I_type_T_1 = bits(_io_I_type_T, 0, 0) @[Bitwise.scala 72:15]
    node io_I_type_hi = mux(_io_I_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_I_type_lo = bits(io.instr, 31, 20) @[IMMEDIATE.scala 18:50]
    node _io_I_type_T_2 = cat(io_I_type_hi, io_I_type_lo) @[Cat.scala 30:58]
    node _io_I_type_T_3 = asSInt(_io_I_type_T_2) @[IMMEDIATE.scala 18:59]
    io.I_type <= _io_I_type_T_3 @[IMMEDIATE.scala 18:11]
    node _io_S_type_T = bits(io.instr, 31, 31) @[IMMEDIATE.scala 20:35]
    node _io_S_type_T_1 = bits(_io_S_type_T, 0, 0) @[Bitwise.scala 72:15]
    node io_S_type_hi_hi = mux(_io_S_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_S_type_hi_lo = bits(io.instr, 31, 25) @[IMMEDIATE.scala 20:50]
    node io_S_type_lo = bits(io.instr, 11, 7) @[IMMEDIATE.scala 20:67]
    node io_S_type_hi = cat(io_S_type_hi_hi, io_S_type_hi_lo) @[Cat.scala 30:58]
    node _io_S_type_T_2 = cat(io_S_type_hi, io_S_type_lo) @[Cat.scala 30:58]
    node _io_S_type_T_3 = asSInt(_io_S_type_T_2) @[IMMEDIATE.scala 20:75]
    io.S_type <= _io_S_type_T_3 @[IMMEDIATE.scala 20:11]
    node _a_T = bits(io.instr, 31, 31) @[IMMEDIATE.scala 22:30]
    node _a_T_1 = bits(_a_T, 0, 0) @[Bitwise.scala 72:15]
    node a_hi_hi_hi = mux(_a_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node a_hi_hi_lo = bits(io.instr, 31, 31) @[IMMEDIATE.scala 22:45]
    node a_hi_lo = bits(io.instr, 7, 7) @[IMMEDIATE.scala 22:59]
    node a_lo_hi_hi = bits(io.instr, 30, 25) @[IMMEDIATE.scala 22:72]
    node a_lo_hi_lo = bits(io.instr, 11, 8) @[IMMEDIATE.scala 22:89]
    node a_lo_hi = cat(a_lo_hi_hi, a_lo_hi_lo) @[Cat.scala 30:58]
    node a_lo = cat(a_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node a_hi_hi = cat(a_hi_hi_hi, a_hi_hi_lo) @[Cat.scala 30:58]
    node a_hi = cat(a_hi_hi, a_hi_lo) @[Cat.scala 30:58]
    node _a_T_2 = cat(a_hi, a_lo) @[Cat.scala 30:58]
    node a = asSInt(_a_T_2) @[IMMEDIATE.scala 22:102]
    node _io_SB_type_T = asSInt(io.pc) @[IMMEDIATE.scala 23:25]
    node _io_SB_type_T_1 = add(a, _io_SB_type_T) @[IMMEDIATE.scala 23:17]
    node _io_SB_type_T_2 = tail(_io_SB_type_T_1, 1) @[IMMEDIATE.scala 23:17]
    node _io_SB_type_T_3 = asSInt(_io_SB_type_T_2) @[IMMEDIATE.scala 23:17]
    io.SB_type <= _io_SB_type_T_3 @[IMMEDIATE.scala 23:12]
    node io_U_type_hi = bits(io.instr, 31, 12) @[IMMEDIATE.scala 25:26]
    node io_U_type_lo = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _io_U_type_T = cat(io_U_type_hi, io_U_type_lo) @[Cat.scala 30:58]
    node _io_U_type_T_1 = asSInt(_io_U_type_T) @[IMMEDIATE.scala 25:53]
    io.U_type <= _io_U_type_T_1 @[IMMEDIATE.scala 25:11]
    node _b_T = bits(io.instr, 31, 31) @[IMMEDIATE.scala 27:30]
    node _b_T_1 = bits(_b_T, 0, 0) @[Bitwise.scala 72:15]
    node b_hi_hi_hi = mux(_b_T_1, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node b_hi_hi_lo = bits(io.instr, 31, 31) @[IMMEDIATE.scala 27:45]
    node b_hi_lo = bits(io.instr, 19, 12) @[IMMEDIATE.scala 27:59]
    node b_lo_hi_hi = bits(io.instr, 20, 20) @[IMMEDIATE.scala 27:76]
    node b_lo_hi_lo = bits(io.instr, 30, 21) @[IMMEDIATE.scala 27:90]
    node b_lo_hi = cat(b_lo_hi_hi, b_lo_hi_lo) @[Cat.scala 30:58]
    node b_lo = cat(b_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node b_hi_hi = cat(b_hi_hi_hi, b_hi_hi_lo) @[Cat.scala 30:58]
    node b_hi = cat(b_hi_hi, b_hi_lo) @[Cat.scala 30:58]
    node _b_T_2 = cat(b_hi, b_lo) @[Cat.scala 30:58]
    node b = asSInt(_b_T_2) @[IMMEDIATE.scala 27:104]
    node _io_UJ_type_T = asSInt(io.pc) @[IMMEDIATE.scala 28:25]
    node _io_UJ_type_T_1 = add(b, _io_UJ_type_T) @[IMMEDIATE.scala 28:17]
    node _io_UJ_type_T_2 = tail(_io_UJ_type_T_1, 1) @[IMMEDIATE.scala 28:17]
    node _io_UJ_type_T_3 = asSInt(_io_UJ_type_T_2) @[IMMEDIATE.scala 28:17]
    io.UJ_type <= _io_UJ_type_T_3 @[IMMEDIATE.scala 28:12]
    
  module RegFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip reg_write : UInt<1>, flip w_reg : UInt<5>, flip w_data : SInt<32>, rdata1 : SInt<32>, rdata2 : SInt<32>}
    
    wire _regs_WIRE : SInt<32>[32] @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[0] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[1] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[2] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[3] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[4] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[5] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[6] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[7] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[8] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[9] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[10] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[11] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[12] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[13] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[14] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[15] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[16] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[17] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[18] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[19] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[20] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[21] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[22] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[23] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[24] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[25] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[26] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[27] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[28] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[29] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[30] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[31] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    reg regs : SInt<32>[32], clock with : (reset => (reset, _regs_WIRE)) @[SCALAR_REGISTER.scala 16:19]
    node _io_rdata1_T = orr(io.rs1) @[SCALAR_REGISTER.scala 18:29]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, regs[io.rs1], asSInt(UInt<1>("h00"))) @[SCALAR_REGISTER.scala 18:18]
    io.rdata1 <= _io_rdata1_T_1 @[SCALAR_REGISTER.scala 18:11]
    node _io_rdata2_T = orr(io.rs2) @[SCALAR_REGISTER.scala 19:29]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, regs[io.rs2], asSInt(UInt<1>("h00"))) @[SCALAR_REGISTER.scala 19:18]
    io.rdata2 <= _io_rdata2_T_1 @[SCALAR_REGISTER.scala 19:11]
    node _T = orr(io.w_reg) @[SCALAR_REGISTER.scala 21:33]
    node _T_1 = and(io.reg_write, _T) @[SCALAR_REGISTER.scala 21:21]
    when _T_1 : @[SCALAR_REGISTER.scala 21:39]
      regs[io.w_reg] <= io.w_data @[SCALAR_REGISTER.scala 22:23]
      skip @[SCALAR_REGISTER.scala 21:39]
    
  module Alu_Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip func3 : UInt<3>, flip func7 : UInt<1>, flip aluOp : UInt<3>, flip I_inst : UInt<1>, flip V_inst : UInt<1>, out : UInt<5>, out_V : UInt<1>}
    
    node _T = eq(io.I_inst, UInt<1>("h01")) @[ALUCONTROL.scala 18:17]
    when _T : @[ALUCONTROL.scala 18:26]
      node _T_1 = eq(io.aluOp, UInt<1>("h00")) @[ALUCONTROL.scala 20:20]
      when _T_1 : @[ALUCONTROL.scala 20:29]
        node io_out_hi = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
        node _io_out_T = cat(io_out_hi, io.func3) @[Cat.scala 30:58]
        io.out <= _io_out_T @[ALUCONTROL.scala 21:16]
        io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 22:18]
        skip @[ALUCONTROL.scala 20:29]
      else : @[ALUCONTROL.scala 25:35]
        node _T_2 = eq(io.aluOp, UInt<1>("h01")) @[ALUCONTROL.scala 25:26]
        when _T_2 : @[ALUCONTROL.scala 25:35]
          node _io_out_T_1 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
          io.out <= _io_out_T_1 @[ALUCONTROL.scala 26:16]
          io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 27:18]
          skip @[ALUCONTROL.scala 25:35]
        else : @[ALUCONTROL.scala 30:35]
          node _T_3 = eq(io.aluOp, UInt<2>("h02")) @[ALUCONTROL.scala 30:26]
          when _T_3 : @[ALUCONTROL.scala 30:35]
            node io_out_hi_1 = cat(UInt<1>("h01"), UInt<1>("h00")) @[Cat.scala 30:58]
            node _io_out_T_2 = cat(io_out_hi_1, io.func3) @[Cat.scala 30:58]
            io.out <= _io_out_T_2 @[ALUCONTROL.scala 31:16]
            io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 32:18]
            skip @[ALUCONTROL.scala 30:35]
          else : @[ALUCONTROL.scala 35:35]
            node _T_4 = eq(io.aluOp, UInt<2>("h03")) @[ALUCONTROL.scala 35:26]
            when _T_4 : @[ALUCONTROL.scala 35:35]
              io.out <= UInt<5>("h01f") @[ALUCONTROL.scala 36:16]
              io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 37:18]
              skip @[ALUCONTROL.scala 35:35]
            else : @[ALUCONTROL.scala 40:35]
              node _T_5 = eq(io.aluOp, UInt<3>("h04")) @[ALUCONTROL.scala 40:26]
              when _T_5 : @[ALUCONTROL.scala 40:35]
                io.out <= UInt<1>("h00") @[ALUCONTROL.scala 41:16]
                io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 42:18]
                skip @[ALUCONTROL.scala 40:35]
              else : @[ALUCONTROL.scala 45:35]
                node _T_6 = eq(io.aluOp, UInt<3>("h05")) @[ALUCONTROL.scala 45:26]
                when _T_6 : @[ALUCONTROL.scala 45:35]
                  io.out <= UInt<1>("h00") @[ALUCONTROL.scala 46:16]
                  io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 47:18]
                  skip @[ALUCONTROL.scala 45:35]
                else : @[ALUCONTROL.scala 50:35]
                  node _T_7 = eq(io.aluOp, UInt<3>("h06")) @[ALUCONTROL.scala 50:26]
                  when _T_7 : @[ALUCONTROL.scala 50:35]
                    io.out <= UInt<1>("h00") @[ALUCONTROL.scala 51:16]
                    io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 52:18]
                    skip @[ALUCONTROL.scala 50:35]
                  else : @[ALUCONTROL.scala 55:35]
                    node _T_8 = eq(io.aluOp, UInt<3>("h07")) @[ALUCONTROL.scala 55:26]
                    when _T_8 : @[ALUCONTROL.scala 55:35]
                      io.out <= UInt<1>("h00") @[ALUCONTROL.scala 56:16]
                      io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 57:18]
                      skip @[ALUCONTROL.scala 55:35]
                    else : @[ALUCONTROL.scala 59:16]
                      io.out <= UInt<1>("h00") @[ALUCONTROL.scala 60:16]
                      io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 61:18]
                      skip @[ALUCONTROL.scala 59:16]
      skip @[ALUCONTROL.scala 18:26]
    else : @[ALUCONTROL.scala 64:32]
      node _T_9 = eq(io.V_inst, UInt<1>("h01")) @[ALUCONTROL.scala 64:23]
      when _T_9 : @[ALUCONTROL.scala 64:32]
        node _T_10 = eq(io.aluOp, UInt<1>("h00")) @[ALUCONTROL.scala 66:20]
        when _T_10 : @[ALUCONTROL.scala 66:29]
          node _io_out_T_3 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
          io.out <= _io_out_T_3 @[ALUCONTROL.scala 67:16]
          io.out_V <= UInt<1>("h01") @[ALUCONTROL.scala 68:18]
          skip @[ALUCONTROL.scala 66:29]
        else : @[ALUCONTROL.scala 69:17]
          io.out <= UInt<1>("h00") @[ALUCONTROL.scala 70:16]
          io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 71:18]
          skip @[ALUCONTROL.scala 69:17]
        skip @[ALUCONTROL.scala 64:32]
      else : @[ALUCONTROL.scala 74:13]
        io.out <= UInt<1>("h00") @[ALUCONTROL.scala 75:12]
        io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 76:14]
        skip @[ALUCONTROL.scala 74:13]
    
  module ALU_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip in_I : UInt<1>, flip in_V : UInt<1>, flip alu_Op : UInt<5>, out : SInt<32>}
    
    node _T = eq(io.in_I, UInt<1>("h01")) @[ALU.scala 49:15]
    when _T : @[ALU.scala 49:24]
      node _out_T = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 51:23]
      node _out_T_1 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 51:48]
      node _out_T_2 = or(_out_T, _out_T_1) @[ALU.scala 51:35]
      node _out_T_3 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 51:74]
      node _out_T_4 = or(_out_T_2, _out_T_3) @[ALU.scala 51:61]
      node _out_T_5 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 51:98]
      node _out_T_6 = or(_out_T_4, _out_T_5) @[ALU.scala 51:85]
      node _out_T_7 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 51:122]
      node _out_T_8 = or(_out_T_6, _out_T_7) @[ALU.scala 51:109]
      node _out_T_9 = eq(io.alu_Op, UInt<5>("h00")) @[ALU.scala 51:147]
      node _out_T_10 = or(_out_T_8, _out_T_9) @[ALU.scala 51:134]
      node _out_T_11 = add(io.in_A, io.in_B) @[ALU.scala 51:171]
      node _out_T_12 = tail(_out_T_11, 1) @[ALU.scala 51:171]
      node _out_T_13 = asSInt(_out_T_12) @[ALU.scala 51:171]
      node _out_T_14 = eq(io.alu_Op, UInt<5>("h01")) @[ALU.scala 52:23]
      node _out_T_15 = eq(io.alu_Op, UInt<5>("h01")) @[ALU.scala 52:48]
      node _out_T_16 = or(_out_T_14, _out_T_15) @[ALU.scala 52:35]
      node _out_T_17 = asUInt(io.in_A) @[ALU.scala 52:71]
      node _out_T_18 = bits(io.in_B, 18, 0) @[ALU.scala 52:88]
      node _out_T_19 = dshl(_out_T_17, _out_T_18) @[ALU.scala 52:78]
      node _out_T_20 = asSInt(_out_T_19) @[ALU.scala 52:104]
      node _out_T_21 = eq(io.alu_Op, UInt<5>("h02")) @[ALU.scala 53:23]
      node _out_T_22 = eq(io.alu_Op, UInt<5>("h02")) @[ALU.scala 53:48]
      node _out_T_23 = or(_out_T_21, _out_T_22) @[ALU.scala 53:35]
      node _out_T_24 = lt(io.in_A, io.in_B) @[ALU.scala 53:74]
      node _out_T_25 = mux(_out_T_24, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 53:65]
      node _out_T_26 = eq(io.alu_Op, UInt<5>("h03")) @[ALU.scala 54:23]
      node _out_T_27 = eq(io.alu_Op, UInt<5>("h03")) @[ALU.scala 54:49]
      node _out_T_28 = or(_out_T_26, _out_T_27) @[ALU.scala 54:36]
      node _out_T_29 = lt(io.in_A, io.in_B) @[ALU.scala 54:76]
      node _out_T_30 = mux(_out_T_29, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 54:67]
      node _out_T_31 = eq(io.alu_Op, UInt<5>("h04")) @[ALU.scala 55:23]
      node _out_T_32 = eq(io.alu_Op, UInt<5>("h04")) @[ALU.scala 55:48]
      node _out_T_33 = or(_out_T_31, _out_T_32) @[ALU.scala 55:35]
      node _out_T_34 = xor(io.in_A, io.in_B) @[ALU.scala 55:71]
      node _out_T_35 = asSInt(_out_T_34) @[ALU.scala 55:71]
      node _out_T_36 = eq(io.alu_Op, UInt<5>("h05")) @[ALU.scala 56:23]
      node _out_T_37 = eq(io.alu_Op, UInt<5>("h05")) @[ALU.scala 56:48]
      node _out_T_38 = or(_out_T_36, _out_T_37) @[ALU.scala 56:35]
      node _out_T_39 = asUInt(io.in_A) @[ALU.scala 56:71]
      node _out_T_40 = bits(io.in_B, 18, 0) @[ALU.scala 56:88]
      node _out_T_41 = dshr(_out_T_39, _out_T_40) @[ALU.scala 56:78]
      node _out_T_42 = asSInt(_out_T_41) @[ALU.scala 56:104]
      node _out_T_43 = eq(io.alu_Op, UInt<5>("h06")) @[ALU.scala 57:23]
      node _out_T_44 = eq(io.alu_Op, UInt<5>("h06")) @[ALU.scala 57:47]
      node _out_T_45 = or(_out_T_43, _out_T_44) @[ALU.scala 57:34]
      node _out_T_46 = or(io.in_A, io.in_B) @[ALU.scala 57:69]
      node _out_T_47 = asSInt(_out_T_46) @[ALU.scala 57:69]
      node _out_T_48 = eq(io.alu_Op, UInt<5>("h07")) @[ALU.scala 58:23]
      node _out_T_49 = eq(io.alu_Op, UInt<5>("h07")) @[ALU.scala 58:48]
      node _out_T_50 = or(_out_T_48, _out_T_49) @[ALU.scala 58:35]
      node _out_T_51 = and(io.in_A, io.in_B) @[ALU.scala 58:71]
      node _out_T_52 = asSInt(_out_T_51) @[ALU.scala 58:71]
      node _out_T_53 = eq(io.alu_Op, UInt<5>("h08")) @[ALU.scala 59:23]
      node _out_T_54 = sub(io.in_A, io.in_B) @[ALU.scala 59:45]
      node _out_T_55 = tail(_out_T_54, 1) @[ALU.scala 59:45]
      node _out_T_56 = asSInt(_out_T_55) @[ALU.scala 59:45]
      node _out_T_57 = eq(io.alu_Op, UInt<5>("h0d")) @[ALU.scala 60:23]
      node _out_T_58 = eq(io.alu_Op, UInt<5>("h0d")) @[ALU.scala 60:48]
      node _out_T_59 = or(_out_T_57, _out_T_58) @[ALU.scala 60:35]
      node _out_T_60 = asUInt(io.in_A) @[ALU.scala 60:71]
      node _out_T_61 = bits(io.in_B, 18, 0) @[ALU.scala 60:88]
      node _out_T_62 = dshr(_out_T_60, _out_T_61) @[ALU.scala 60:78]
      node _out_T_63 = asSInt(_out_T_62) @[ALU.scala 60:104]
      node _out_T_64 = eq(io.alu_Op, UInt<5>("h01f")) @[ALU.scala 61:23]
      node _out_T_65 = eq(io.alu_Op, UInt<5>("h01f")) @[ALU.scala 61:48]
      node _out_T_66 = or(_out_T_64, _out_T_65) @[ALU.scala 61:35]
      node _out_T_67 = mux(_out_T_66, io.in_A, asSInt(UInt<1>("h00"))) @[ALU.scala 61:12]
      node _out_T_68 = mux(_out_T_59, _out_T_63, _out_T_67) @[ALU.scala 60:12]
      node _out_T_69 = mux(_out_T_53, _out_T_56, _out_T_68) @[ALU.scala 59:12]
      node _out_T_70 = mux(_out_T_50, _out_T_52, _out_T_69) @[ALU.scala 58:12]
      node _out_T_71 = mux(_out_T_45, _out_T_47, _out_T_70) @[ALU.scala 57:12]
      node _out_T_72 = mux(_out_T_38, _out_T_42, _out_T_71) @[ALU.scala 56:12]
      node _out_T_73 = mux(_out_T_33, _out_T_35, _out_T_72) @[ALU.scala 55:12]
      node _out_T_74 = mux(_out_T_28, _out_T_30, _out_T_73) @[ALU.scala 54:12]
      node _out_T_75 = mux(_out_T_23, _out_T_25, _out_T_74) @[ALU.scala 53:12]
      node _out_T_76 = mux(_out_T_16, _out_T_20, _out_T_75) @[ALU.scala 52:12]
      node out = mux(_out_T_10, _out_T_13, _out_T_76) @[ALU.scala 51:12]
      io.out <= out @[ALU.scala 63:12]
      skip @[ALU.scala 49:24]
    else : @[ALU.scala 65:30]
      node _T_1 = eq(io.in_V, UInt<1>("h01")) @[ALU.scala 65:21]
      when _T_1 : @[ALU.scala 65:30]
        node _T_2 = eq(io.alu_Op, UInt<5>("h07")) @[ALU.scala 66:25]
        when _T_2 : @[ALU.scala 66:42]
          node _T_3 = leq(io.in_A, io.in_B) @[ALU.scala 67:26]
          when _T_3 : @[ALU.scala 67:37]
            io.out <= io.in_A @[ALU.scala 68:32]
            skip @[ALU.scala 67:37]
          else : @[ALU.scala 69:59]
            node _T_4 = mul(io.in_B, asSInt(UInt<3>("h02"))) @[ALU.scala 69:52]
            node _T_5 = geq(io.in_A, _T_4) @[ALU.scala 69:40]
            when _T_5 : @[ALU.scala 69:59]
              io.out <= io.in_B @[ALU.scala 70:32]
              skip @[ALU.scala 69:59]
            else : @[ALU.scala 71:32]
              io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 72:32]
              skip @[ALU.scala 71:32]
          skip @[ALU.scala 66:42]
        else : @[ALU.scala 75:21]
          io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 76:20]
          skip @[ALU.scala 75:21]
        skip @[ALU.scala 65:30]
      else : @[ALU.scala 79:13]
        io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 80:12]
        skip @[ALU.scala 79:13]
    
  module BranchControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip fnct3 : UInt<3>, flip branch : UInt<1>, flip arg_x : SInt<32>, flip arg_y : SInt<32>, br_taken : UInt<1>}
    
    node _T = eq(io.branch, UInt<1>("h01")) @[BRANCH.scala 15:16]
    when _T : @[BRANCH.scala 15:24]
      node _T_1 = eq(io.fnct3, UInt<1>("h00")) @[BRANCH.scala 17:21]
      when _T_1 : @[BRANCH.scala 17:31]
        node _io_br_taken_T = eq(io.arg_x, io.arg_y) @[BRANCH.scala 18:33]
        io.br_taken <= _io_br_taken_T @[BRANCH.scala 18:21]
        skip @[BRANCH.scala 17:31]
      else : @[BRANCH.scala 20:37]
        node _T_2 = eq(io.fnct3, UInt<1>("h01")) @[BRANCH.scala 20:27]
        when _T_2 : @[BRANCH.scala 20:37]
          node _io_br_taken_T_1 = neq(io.arg_x, io.arg_y) @[BRANCH.scala 21:33]
          io.br_taken <= _io_br_taken_T_1 @[BRANCH.scala 21:21]
          skip @[BRANCH.scala 20:37]
        else : @[BRANCH.scala 23:37]
          node _T_3 = eq(io.fnct3, UInt<3>("h04")) @[BRANCH.scala 23:27]
          when _T_3 : @[BRANCH.scala 23:37]
            node _io_br_taken_T_2 = lt(io.arg_x, io.arg_y) @[BRANCH.scala 24:33]
            io.br_taken <= _io_br_taken_T_2 @[BRANCH.scala 24:21]
            skip @[BRANCH.scala 23:37]
          else : @[BRANCH.scala 26:37]
            node _T_4 = eq(io.fnct3, UInt<3>("h05")) @[BRANCH.scala 26:27]
            when _T_4 : @[BRANCH.scala 26:37]
              node _io_br_taken_T_3 = geq(io.arg_x, io.arg_y) @[BRANCH.scala 27:33]
              io.br_taken <= _io_br_taken_T_3 @[BRANCH.scala 27:21]
              skip @[BRANCH.scala 26:37]
            else : @[BRANCH.scala 29:37]
              node _T_5 = eq(io.fnct3, UInt<3>("h07")) @[BRANCH.scala 29:27]
              when _T_5 : @[BRANCH.scala 29:37]
                node _io_br_taken_T_4 = geq(io.arg_x, io.arg_y) @[BRANCH.scala 30:34]
                io.br_taken <= _io_br_taken_T_4 @[BRANCH.scala 30:21]
                skip @[BRANCH.scala 29:37]
              else : @[BRANCH.scala 32:37]
                node _T_6 = eq(io.fnct3, UInt<3>("h06")) @[BRANCH.scala 32:27]
                when _T_6 : @[BRANCH.scala 32:37]
                  node _io_br_taken_T_5 = leq(io.arg_x, io.arg_y) @[BRANCH.scala 33:34]
                  io.br_taken <= _io_br_taken_T_5 @[BRANCH.scala 33:21]
                  skip @[BRANCH.scala 32:37]
                else : @[BRANCH.scala 34:16]
                  io.br_taken <= UInt<1>("h00") @[BRANCH.scala 35:21]
                  skip @[BRANCH.scala 34:16]
      skip @[BRANCH.scala 15:24]
    else : @[BRANCH.scala 38:12]
      io.br_taken <= UInt<1>("h00") @[BRANCH.scala 39:17]
      skip @[BRANCH.scala 38:12]
    
  module DataMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, flip dataIn : SInt<32>, flip mem_read : UInt<1>, flip mem_write : UInt<1>, dataOut : SInt<32>}
    
    cmem imem1 : SInt<32>[1024] @[DATA_MEM.scala 14:17]
    io.dataOut <= asSInt(UInt<1>("h00")) @[DATA_MEM.scala 16:12]
    node _T = eq(io.mem_write, UInt<1>("h01")) @[DATA_MEM.scala 18:21]
    when _T : @[DATA_MEM.scala 18:30]
      node _T_1 = bits(io.addr, 9, 0)
      write mport MPORT = imem1[_T_1], clock
      MPORT <= io.dataIn
      skip @[DATA_MEM.scala 18:30]
    node _T_2 = eq(io.mem_read, UInt<1>("h01")) @[DATA_MEM.scala 22:20]
    when _T_2 : @[DATA_MEM.scala 22:30]
      node _io_dataOut_T = bits(io.addr, 9, 0) @[DATA_MEM.scala 23:30]
      read mport io_dataOut_MPORT = imem1[_io_dataOut_T], clock @[DATA_MEM.scala 23:30]
      io.dataOut <= io_dataOut_MPORT @[DATA_MEM.scala 23:16]
      skip @[DATA_MEM.scala 22:30]
    
  module Jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip imme : UInt<32>, flip rdata1 : UInt<32>, out : UInt<32>}
    
    node _a_T = add(io.imme, io.rdata1) @[JALR.scala 12:17]
    node a = tail(_a_T, 1) @[JALR.scala 12:17]
    node b = and(UInt<32>("h0fffffffe"), a) @[JALR.scala 13:23]
    io.out <= b @[JALR.scala 14:8]
    
  module V_Csr : 
    input clock : Clock
    input reset : Reset
    output io : {flip Vtype_inst : UInt<11>, flip vl_writeback : UInt<32>, vl_out : UInt<32>}
    
    node vtype_encod_hi = mux(UInt<1>("h00"), UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node vtype_encod = cat(vtype_encod_hi, io.Vtype_inst) @[Cat.scala 30:58]
    reg vtypeReg : UInt, clock with : (reset => (reset, vtype_encod)) @[V_CSR.scala 18:23]
    reg vlReg : UInt, clock with : (reset => (reset, io.vl_writeback)) @[V_CSR.scala 19:20]
    io.vl_out <= vlReg @[V_CSR.scala 23:11]
    
  module Vlmax : 
    input clock : Clock
    input reset : Reset
    output io : {flip v_lmul : UInt<3>, flip v_sew : UInt<3>, vlmax : UInt<32>}
    
    wire lmul : UInt<4> @[VLMAX.scala 14:16]
    wire sew : UInt<7> @[VLMAX.scala 15:15]
    node _T = eq(io.v_lmul, UInt<1>("h00")) @[VLMAX.scala 18:17]
    when _T : @[VLMAX.scala 18:31]
      lmul <= UInt<1>("h01") @[VLMAX.scala 19:10]
      skip @[VLMAX.scala 18:31]
    else : @[VLMAX.scala 20:37]
      node _T_1 = eq(io.v_lmul, UInt<1>("h01")) @[VLMAX.scala 20:23]
      when _T_1 : @[VLMAX.scala 20:37]
        lmul <= UInt<2>("h02") @[VLMAX.scala 21:10]
        skip @[VLMAX.scala 20:37]
      else : @[VLMAX.scala 22:37]
        node _T_2 = eq(io.v_lmul, UInt<2>("h02")) @[VLMAX.scala 22:23]
        when _T_2 : @[VLMAX.scala 22:37]
          lmul <= UInt<3>("h04") @[VLMAX.scala 23:10]
          skip @[VLMAX.scala 22:37]
        else : @[VLMAX.scala 24:37]
          node _T_3 = eq(io.v_lmul, UInt<2>("h03")) @[VLMAX.scala 24:23]
          when _T_3 : @[VLMAX.scala 24:37]
            lmul <= UInt<4>("h08") @[VLMAX.scala 25:10]
            skip @[VLMAX.scala 24:37]
          else : @[VLMAX.scala 26:13]
            lmul <= UInt<1>("h00") @[VLMAX.scala 27:10]
            skip @[VLMAX.scala 26:13]
    node _T_4 = eq(io.v_sew, UInt<1>("h00")) @[VLMAX.scala 31:16]
    when _T_4 : @[VLMAX.scala 31:30]
      sew <= UInt<4>("h08") @[VLMAX.scala 32:9]
      skip @[VLMAX.scala 31:30]
    else : @[VLMAX.scala 33:36]
      node _T_5 = eq(io.v_sew, UInt<1>("h01")) @[VLMAX.scala 33:22]
      when _T_5 : @[VLMAX.scala 33:36]
        sew <= UInt<5>("h010") @[VLMAX.scala 34:9]
        skip @[VLMAX.scala 33:36]
      else : @[VLMAX.scala 35:36]
        node _T_6 = eq(io.v_sew, UInt<2>("h02")) @[VLMAX.scala 35:22]
        when _T_6 : @[VLMAX.scala 35:36]
          sew <= UInt<6>("h020") @[VLMAX.scala 36:9]
          skip @[VLMAX.scala 35:36]
        else : @[VLMAX.scala 37:36]
          node _T_7 = eq(io.v_sew, UInt<2>("h03")) @[VLMAX.scala 37:22]
          when _T_7 : @[VLMAX.scala 37:36]
            sew <= UInt<7>("h040") @[VLMAX.scala 38:9]
            skip @[VLMAX.scala 37:36]
          else : @[VLMAX.scala 39:13]
            sew <= UInt<1>("h00") @[VLMAX.scala 40:9]
            skip @[VLMAX.scala 39:13]
    node _T_8 = eq(lmul, UInt<1>("h01")) @[VLMAX.scala 45:12]
    node _T_9 = eq(sew, UInt<4>("h08")) @[VLMAX.scala 45:27]
    node _T_10 = and(_T_8, _T_9) @[VLMAX.scala 45:20]
    when _T_10 : @[VLMAX.scala 45:36]
      io.vlmax <= UInt<5>("h010") @[VLMAX.scala 46:14]
      skip @[VLMAX.scala 45:36]
    else : @[VLMAX.scala 47:42]
      node _T_11 = eq(lmul, UInt<2>("h02")) @[VLMAX.scala 47:18]
      node _T_12 = eq(sew, UInt<4>("h08")) @[VLMAX.scala 47:33]
      node _T_13 = and(_T_11, _T_12) @[VLMAX.scala 47:26]
      when _T_13 : @[VLMAX.scala 47:42]
        io.vlmax <= UInt<6>("h020") @[VLMAX.scala 48:14]
        skip @[VLMAX.scala 47:42]
      else : @[VLMAX.scala 49:42]
        node _T_14 = eq(lmul, UInt<3>("h04")) @[VLMAX.scala 49:18]
        node _T_15 = eq(sew, UInt<4>("h08")) @[VLMAX.scala 49:33]
        node _T_16 = and(_T_14, _T_15) @[VLMAX.scala 49:26]
        when _T_16 : @[VLMAX.scala 49:42]
          io.vlmax <= UInt<7>("h040") @[VLMAX.scala 50:14]
          skip @[VLMAX.scala 49:42]
        else : @[VLMAX.scala 51:42]
          node _T_17 = eq(lmul, UInt<4>("h08")) @[VLMAX.scala 51:18]
          node _T_18 = eq(sew, UInt<4>("h08")) @[VLMAX.scala 51:33]
          node _T_19 = and(_T_17, _T_18) @[VLMAX.scala 51:26]
          when _T_19 : @[VLMAX.scala 51:42]
            io.vlmax <= UInt<8>("h080") @[VLMAX.scala 52:14]
            skip @[VLMAX.scala 51:42]
          else : @[VLMAX.scala 53:43]
            node _T_20 = eq(lmul, UInt<1>("h01")) @[VLMAX.scala 53:18]
            node _T_21 = eq(sew, UInt<5>("h010")) @[VLMAX.scala 53:33]
            node _T_22 = and(_T_20, _T_21) @[VLMAX.scala 53:26]
            when _T_22 : @[VLMAX.scala 53:43]
              io.vlmax <= UInt<4>("h08") @[VLMAX.scala 54:14]
              skip @[VLMAX.scala 53:43]
            else : @[VLMAX.scala 55:43]
              node _T_23 = eq(lmul, UInt<2>("h02")) @[VLMAX.scala 55:18]
              node _T_24 = eq(sew, UInt<5>("h010")) @[VLMAX.scala 55:33]
              node _T_25 = and(_T_23, _T_24) @[VLMAX.scala 55:26]
              when _T_25 : @[VLMAX.scala 55:43]
                io.vlmax <= UInt<5>("h010") @[VLMAX.scala 56:14]
                skip @[VLMAX.scala 55:43]
              else : @[VLMAX.scala 57:43]
                node _T_26 = eq(lmul, UInt<3>("h04")) @[VLMAX.scala 57:18]
                node _T_27 = eq(sew, UInt<5>("h010")) @[VLMAX.scala 57:33]
                node _T_28 = and(_T_26, _T_27) @[VLMAX.scala 57:26]
                when _T_28 : @[VLMAX.scala 57:43]
                  io.vlmax <= UInt<6>("h020") @[VLMAX.scala 58:14]
                  skip @[VLMAX.scala 57:43]
                else : @[VLMAX.scala 59:43]
                  node _T_29 = eq(lmul, UInt<4>("h08")) @[VLMAX.scala 59:18]
                  node _T_30 = eq(sew, UInt<5>("h010")) @[VLMAX.scala 59:33]
                  node _T_31 = and(_T_29, _T_30) @[VLMAX.scala 59:26]
                  when _T_31 : @[VLMAX.scala 59:43]
                    io.vlmax <= UInt<7>("h040") @[VLMAX.scala 60:14]
                    skip @[VLMAX.scala 59:43]
                  else : @[VLMAX.scala 61:43]
                    node _T_32 = eq(lmul, UInt<1>("h01")) @[VLMAX.scala 61:18]
                    node _T_33 = eq(sew, UInt<6>("h020")) @[VLMAX.scala 61:33]
                    node _T_34 = and(_T_32, _T_33) @[VLMAX.scala 61:26]
                    when _T_34 : @[VLMAX.scala 61:43]
                      io.vlmax <= UInt<3>("h04") @[VLMAX.scala 62:14]
                      skip @[VLMAX.scala 61:43]
                    else : @[VLMAX.scala 63:43]
                      node _T_35 = eq(lmul, UInt<2>("h02")) @[VLMAX.scala 63:18]
                      node _T_36 = eq(sew, UInt<6>("h020")) @[VLMAX.scala 63:33]
                      node _T_37 = and(_T_35, _T_36) @[VLMAX.scala 63:26]
                      when _T_37 : @[VLMAX.scala 63:43]
                        io.vlmax <= UInt<4>("h08") @[VLMAX.scala 64:14]
                        skip @[VLMAX.scala 63:43]
                      else : @[VLMAX.scala 65:43]
                        node _T_38 = eq(lmul, UInt<3>("h04")) @[VLMAX.scala 65:18]
                        node _T_39 = eq(sew, UInt<6>("h020")) @[VLMAX.scala 65:33]
                        node _T_40 = and(_T_38, _T_39) @[VLMAX.scala 65:26]
                        when _T_40 : @[VLMAX.scala 65:43]
                          io.vlmax <= UInt<5>("h010") @[VLMAX.scala 66:14]
                          skip @[VLMAX.scala 65:43]
                        else : @[VLMAX.scala 67:43]
                          node _T_41 = eq(lmul, UInt<4>("h08")) @[VLMAX.scala 67:18]
                          node _T_42 = eq(sew, UInt<6>("h020")) @[VLMAX.scala 67:33]
                          node _T_43 = and(_T_41, _T_42) @[VLMAX.scala 67:26]
                          when _T_43 : @[VLMAX.scala 67:43]
                            io.vlmax <= UInt<6>("h020") @[VLMAX.scala 68:14]
                            skip @[VLMAX.scala 67:43]
                          else : @[VLMAX.scala 69:43]
                            node _T_44 = eq(lmul, UInt<1>("h01")) @[VLMAX.scala 69:18]
                            node _T_45 = eq(sew, UInt<7>("h040")) @[VLMAX.scala 69:33]
                            node _T_46 = and(_T_44, _T_45) @[VLMAX.scala 69:26]
                            when _T_46 : @[VLMAX.scala 69:43]
                              io.vlmax <= UInt<2>("h02") @[VLMAX.scala 70:14]
                              skip @[VLMAX.scala 69:43]
                            else : @[VLMAX.scala 71:43]
                              node _T_47 = eq(lmul, UInt<2>("h02")) @[VLMAX.scala 71:18]
                              node _T_48 = eq(sew, UInt<7>("h040")) @[VLMAX.scala 71:33]
                              node _T_49 = and(_T_47, _T_48) @[VLMAX.scala 71:26]
                              when _T_49 : @[VLMAX.scala 71:43]
                                io.vlmax <= UInt<3>("h04") @[VLMAX.scala 72:14]
                                skip @[VLMAX.scala 71:43]
                              else : @[VLMAX.scala 73:43]
                                node _T_50 = eq(lmul, UInt<3>("h04")) @[VLMAX.scala 73:18]
                                node _T_51 = eq(sew, UInt<7>("h040")) @[VLMAX.scala 73:33]
                                node _T_52 = and(_T_50, _T_51) @[VLMAX.scala 73:26]
                                when _T_52 : @[VLMAX.scala 73:43]
                                  io.vlmax <= UInt<4>("h08") @[VLMAX.scala 74:14]
                                  skip @[VLMAX.scala 73:43]
                                else : @[VLMAX.scala 75:43]
                                  node _T_53 = eq(lmul, UInt<4>("h08")) @[VLMAX.scala 75:18]
                                  node _T_54 = eq(sew, UInt<7>("h040")) @[VLMAX.scala 75:33]
                                  node _T_55 = and(_T_53, _T_54) @[VLMAX.scala 75:26]
                                  when _T_55 : @[VLMAX.scala 75:43]
                                    io.vlmax <= UInt<5>("h010") @[VLMAX.scala 76:14]
                                    skip @[VLMAX.scala 75:43]
                                  else : @[VLMAX.scala 77:13]
                                    io.vlmax <= UInt<1>("h00") @[VLMAX.scala 78:14]
                                    skip @[VLMAX.scala 77:13]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : SInt<4>, inst : UInt<32>, w_reg_out : UInt<32>, reg_out : UInt<32>, data_mem_addr : UInt<32>, data_mem_dataIn : UInt<32>, b_out : UInt<32>, b_2x1mux : UInt<32>, b_4x1mux : SInt<32>, vlmax_value : UInt<32>, avl_value : SInt<32>}
    
    inst PC_module of PC @[RISC5.scala 22:23]
    PC_module.clock <= clock
    PC_module.reset <= reset
    inst Program_Counter_module of Program_Counter @[RISC5.scala 23:36]
    Program_Counter_module.clock <= clock
    Program_Counter_module.reset <= reset
    inst InstMem1_module of InstMem1 @[RISC5.scala 24:30]
    InstMem1_module.clock <= clock
    InstMem1_module.reset <= reset
    inst Control_module of Control @[RISC5.scala 25:28]
    Control_module.clock <= clock
    Control_module.reset <= reset
    inst Immde_module of Immde @[RISC5.scala 26:27]
    Immde_module.clock <= clock
    Immde_module.reset <= reset
    inst RegFile_module of RegFile @[RISC5.scala 27:28]
    RegFile_module.clock <= clock
    RegFile_module.reset <= reset
    inst Alu_Control_module of Alu_Control @[RISC5.scala 28:32]
    Alu_Control_module.clock <= clock
    Alu_Control_module.reset <= reset
    inst ALU_1_module of ALU_1 @[RISC5.scala 29:26]
    ALU_1_module.clock <= clock
    ALU_1_module.reset <= reset
    inst Branch_module of BranchControl @[RISC5.scala 30:27]
    Branch_module.clock <= clock
    Branch_module.reset <= reset
    inst DataMem_module of DataMem @[RISC5.scala 31:28]
    DataMem_module.clock <= clock
    DataMem_module.reset <= reset
    inst Jalr_module of Jalr @[RISC5.scala 32:25]
    Jalr_module.clock <= clock
    Jalr_module.reset <= reset
    inst V_Csr_module of V_Csr @[RISC5.scala 33:26]
    V_Csr_module.clock <= clock
    V_Csr_module.reset <= reset
    inst Vlmax_module of Vlmax @[RISC5.scala 34:26]
    Vlmax_module.clock <= clock
    Vlmax_module.reset <= reset
    node _Program_Counter_module_io_pc_T = asUInt(PC_module.io.out) @[RISC5.scala 38:50]
    Program_Counter_module.io.pc <= _Program_Counter_module_io_pc_T @[RISC5.scala 38:30]
    node _InstMem1_module_io_addr_T = bits(PC_module.io.out, 21, 2) @[RISC5.scala 39:44]
    InstMem1_module.io.addr <= _InstMem1_module_io_addr_T @[RISC5.scala 39:25]
    node _Immde_module_io_pc_T = asUInt(PC_module.io.out) @[RISC5.scala 40:40]
    Immde_module.io.pc <= _Immde_module_io_pc_T @[RISC5.scala 40:20]
    node _Control_module_io_opcode_T = bits(InstMem1_module.io.data, 6, 0) @[RISC5.scala 42:52]
    Control_module.io.opcode <= _Control_module_io_opcode_T @[RISC5.scala 42:26]
    node _Control_module_io_rs1_no_T = bits(InstMem1_module.io.data, 19, 15) @[RISC5.scala 43:52]
    Control_module.io.rs1_no <= _Control_module_io_rs1_no_T @[RISC5.scala 43:26]
    node _Control_module_io_rd_no_T = bits(InstMem1_module.io.data, 11, 7) @[RISC5.scala 44:51]
    Control_module.io.rd_no <= _Control_module_io_rd_no_T @[RISC5.scala 44:25]
    node _RegFile_module_io_rs1_T = eq(Control_module.io.opcode, UInt<6>("h033")) @[RISC5.scala 45:55]
    node _RegFile_module_io_rs1_T_1 = eq(Control_module.io.opcode, UInt<5>("h013")) @[RISC5.scala 45:92]
    node _RegFile_module_io_rs1_T_2 = or(_RegFile_module_io_rs1_T, _RegFile_module_io_rs1_T_1) @[RISC5.scala 45:64]
    node _RegFile_module_io_rs1_T_3 = eq(Control_module.io.opcode, UInt<6>("h023")) @[RISC5.scala 45:129]
    node _RegFile_module_io_rs1_T_4 = or(_RegFile_module_io_rs1_T_2, _RegFile_module_io_rs1_T_3) @[RISC5.scala 45:101]
    node _RegFile_module_io_rs1_T_5 = eq(Control_module.io.opcode, UInt<2>("h03")) @[RISC5.scala 45:166]
    node _RegFile_module_io_rs1_T_6 = or(_RegFile_module_io_rs1_T_4, _RegFile_module_io_rs1_T_5) @[RISC5.scala 45:138]
    node _RegFile_module_io_rs1_T_7 = eq(Control_module.io.opcode, UInt<7>("h063")) @[RISC5.scala 45:202]
    node _RegFile_module_io_rs1_T_8 = or(_RegFile_module_io_rs1_T_6, _RegFile_module_io_rs1_T_7) @[RISC5.scala 45:174]
    node _RegFile_module_io_rs1_T_9 = eq(Control_module.io.opcode, UInt<7>("h067")) @[RISC5.scala 45:239]
    node _RegFile_module_io_rs1_T_10 = or(_RegFile_module_io_rs1_T_8, _RegFile_module_io_rs1_T_9) @[RISC5.scala 45:211]
    node _RegFile_module_io_rs1_T_11 = eq(Control_module.io.opcode, UInt<7>("h057")) @[RISC5.scala 45:277]
    node _RegFile_module_io_rs1_T_12 = or(_RegFile_module_io_rs1_T_10, _RegFile_module_io_rs1_T_11) @[RISC5.scala 45:249]
    node _RegFile_module_io_rs1_T_13 = bits(InstMem1_module.io.data, 19, 15) @[RISC5.scala 45:310]
    node _RegFile_module_io_rs1_T_14 = mux(_RegFile_module_io_rs1_T_12, _RegFile_module_io_rs1_T_13, UInt<1>("h00")) @[RISC5.scala 45:29]
    RegFile_module.io.rs1 <= _RegFile_module_io_rs1_T_14 @[RISC5.scala 45:23]
    node _RegFile_module_io_rs2_T = eq(Control_module.io.opcode, UInt<6>("h033")) @[RISC5.scala 46:55]
    node _RegFile_module_io_rs2_T_1 = eq(Control_module.io.opcode, UInt<6>("h023")) @[RISC5.scala 46:92]
    node _RegFile_module_io_rs2_T_2 = or(_RegFile_module_io_rs2_T, _RegFile_module_io_rs2_T_1) @[RISC5.scala 46:64]
    node _RegFile_module_io_rs2_T_3 = eq(Control_module.io.opcode, UInt<7>("h063")) @[RISC5.scala 46:129]
    node _RegFile_module_io_rs2_T_4 = or(_RegFile_module_io_rs2_T_2, _RegFile_module_io_rs2_T_3) @[RISC5.scala 46:101]
    node _RegFile_module_io_rs2_T_5 = bits(InstMem1_module.io.data, 24, 20) @[RISC5.scala 46:162]
    node _RegFile_module_io_rs2_T_6 = mux(_RegFile_module_io_rs2_T_4, _RegFile_module_io_rs2_T_5, UInt<1>("h00")) @[RISC5.scala 46:29]
    RegFile_module.io.rs2 <= _RegFile_module_io_rs2_T_6 @[RISC5.scala 46:23]
    node _RegFile_module_io_w_reg_T = bits(InstMem1_module.io.data, 11, 7) @[RISC5.scala 47:51]
    RegFile_module.io.w_reg <= _RegFile_module_io_w_reg_T @[RISC5.scala 47:25]
    Immde_module.io.instr <= InstMem1_module.io.data @[RISC5.scala 48:23]
    node _Alu_Control_module_io_func3_T = bits(InstMem1_module.io.data, 14, 12) @[RISC5.scala 49:55]
    Alu_Control_module.io.func3 <= _Alu_Control_module_io_func3_T @[RISC5.scala 49:29]
    node _Alu_Control_module_io_func7_T = bits(InstMem1_module.io.data, 30, 30) @[RISC5.scala 50:55]
    Alu_Control_module.io.func7 <= _Alu_Control_module_io_func7_T @[RISC5.scala 50:29]
    node _V_Csr_module_io_Vtype_inst_T = bits(InstMem1_module.io.data, 30, 20) @[RISC5.scala 51:54]
    V_Csr_module.io.Vtype_inst <= _V_Csr_module_io_Vtype_inst_T @[RISC5.scala 51:28]
    node _a_T = eq(UInt<1>("h00"), Control_module.io.extend) @[Mux.scala 80:60]
    node _a_T_1 = mux(_a_T, Immde_module.io.I_type, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _a_T_2 = eq(UInt<1>("h01"), Control_module.io.extend) @[Mux.scala 80:60]
    node _a_T_3 = mux(_a_T_2, Immde_module.io.S_type, _a_T_1) @[Mux.scala 80:57]
    node _a_T_4 = eq(UInt<2>("h02"), Control_module.io.extend) @[Mux.scala 80:60]
    node a = mux(_a_T_4, Immde_module.io.U_type, _a_T_3) @[Mux.scala 80:57]
    RegFile_module.io.reg_write <= Control_module.io.reg_write @[RISC5.scala 58:29]
    Alu_Control_module.io.I_inst <= Control_module.io.is_I @[RISC5.scala 60:30]
    Alu_Control_module.io.V_inst <= Control_module.io.is_V @[RISC5.scala 61:30]
    Alu_Control_module.io.aluOp <= Control_module.io.alu_operation @[RISC5.scala 62:29]
    node _Vlmax_module_io_v_lmul_T = bits(V_Csr_module.io.Vtype_inst, 2, 0) @[RISC5.scala 64:53]
    Vlmax_module.io.v_lmul <= _Vlmax_module_io_v_lmul_T @[RISC5.scala 64:24]
    node _Vlmax_module_io_v_sew_T = bits(V_Csr_module.io.Vtype_inst, 5, 3) @[RISC5.scala 65:52]
    Vlmax_module.io.v_sew <= _Vlmax_module_io_v_sew_T @[RISC5.scala 65:23]
    node _d_T = asSInt(UInt<32>("h0ffffffff")) @[RISC5.scala 69:52]
    node _d_T_1 = asSInt(V_Csr_module.io.vl_out) @[RISC5.scala 70:37]
    node _d_T_2 = eq(UInt<1>("h00"), Control_module.io.avl_ope) @[Mux.scala 80:60]
    node _d_T_3 = mux(_d_T_2, RegFile_module.io.rdata1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _d_T_4 = eq(UInt<1>("h01"), Control_module.io.avl_ope) @[Mux.scala 80:60]
    node _d_T_5 = mux(_d_T_4, _d_T, _d_T_3) @[Mux.scala 80:57]
    node _d_T_6 = eq(UInt<2>("h02"), Control_module.io.avl_ope) @[Mux.scala 80:60]
    node d = mux(_d_T_6, _d_T_1, _d_T_5) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T = asSInt(Program_Counter_module.io.out) @[RISC5.scala 74:44]
    node _ALU_1_module_io_in_A_T_1 = eq(UInt<1>("h00"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_2 = mux(_ALU_1_module_io_in_A_T_1, RegFile_module.io.rdata1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T_3 = eq(UInt<1>("h01"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_4 = mux(_ALU_1_module_io_in_A_T_3, _ALU_1_module_io_in_A_T, _ALU_1_module_io_in_A_T_2) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T_5 = eq(UInt<2>("h02"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_6 = mux(_ALU_1_module_io_in_A_T_5, PC_module.io.out, _ALU_1_module_io_in_A_T_4) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T_7 = eq(UInt<2>("h03"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_8 = mux(_ALU_1_module_io_in_A_T_7, RegFile_module.io.rdata1, _ALU_1_module_io_in_A_T_6) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T_9 = eq(UInt<3>("h04"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_10 = mux(_ALU_1_module_io_in_A_T_9, d, _ALU_1_module_io_in_A_T_8) @[Mux.scala 80:57]
    ALU_1_module.io.in_A <= _ALU_1_module_io_in_A_T_10 @[RISC5.scala 72:22]
    node _ALU_1_module_io_in_B_T = asSInt(Vlmax_module.io.vlmax) @[RISC5.scala 82:36]
    node _ALU_1_module_io_in_B_T_1 = eq(UInt<1>("h00"), Control_module.io.operand_B) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_B_T_2 = mux(_ALU_1_module_io_in_B_T_1, RegFile_module.io.rdata2, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_B_T_3 = eq(UInt<1>("h01"), Control_module.io.operand_B) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_B_T_4 = mux(_ALU_1_module_io_in_B_T_3, a, _ALU_1_module_io_in_B_T_2) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_B_T_5 = eq(UInt<2>("h02"), Control_module.io.operand_B) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_B_T_6 = mux(_ALU_1_module_io_in_B_T_5, _ALU_1_module_io_in_B_T, _ALU_1_module_io_in_B_T_4) @[Mux.scala 80:57]
    ALU_1_module.io.in_B <= _ALU_1_module_io_in_B_T_6 @[RISC5.scala 79:22]
    ALU_1_module.io.in_I <= Control_module.io.is_I @[RISC5.scala 84:22]
    ALU_1_module.io.in_V <= Control_module.io.is_V @[RISC5.scala 85:22]
    ALU_1_module.io.alu_Op <= Alu_Control_module.io.out @[RISC5.scala 86:24]
    node _DataMem_module_io_addr_T = asUInt(ALU_1_module.io.out) @[RISC5.scala 88:47]
    DataMem_module.io.addr <= _DataMem_module_io_addr_T @[RISC5.scala 88:24]
    DataMem_module.io.dataIn <= RegFile_module.io.rdata2 @[RISC5.scala 89:26]
    DataMem_module.io.mem_read <= Control_module.io.mem_read @[RISC5.scala 90:28]
    DataMem_module.io.mem_write <= Control_module.io.mem_write @[RISC5.scala 91:29]
    node c = and(Branch_module.io.br_taken, Control_module.io.branch) @[RISC5.scala 93:35]
    node _b_T = asUInt(Immde_module.io.SB_type) @[RISC5.scala 97:38]
    node _b_T_1 = eq(UInt<1>("h01"), c) @[Mux.scala 80:60]
    node b = mux(_b_T_1, _b_T, Program_Counter_module.io.out) @[Mux.scala 80:57]
    node _PC_module_io_in_T = asSInt(Program_Counter_module.io.out) @[RISC5.scala 100:44]
    node _PC_module_io_in_T_1 = asSInt(b) @[RISC5.scala 101:16]
    node _PC_module_io_in_T_2 = asSInt(Jalr_module.io.out) @[RISC5.scala 103:33]
    node _PC_module_io_in_T_3 = eq(UInt<1>("h01"), Control_module.io.next_pc_sel) @[Mux.scala 80:60]
    node _PC_module_io_in_T_4 = mux(_PC_module_io_in_T_3, _PC_module_io_in_T_1, _PC_module_io_in_T) @[Mux.scala 80:57]
    node _PC_module_io_in_T_5 = eq(UInt<2>("h02"), Control_module.io.next_pc_sel) @[Mux.scala 80:60]
    node _PC_module_io_in_T_6 = mux(_PC_module_io_in_T_5, Immde_module.io.UJ_type, _PC_module_io_in_T_4) @[Mux.scala 80:57]
    node _PC_module_io_in_T_7 = eq(UInt<2>("h03"), Control_module.io.next_pc_sel) @[Mux.scala 80:60]
    node _PC_module_io_in_T_8 = mux(_PC_module_io_in_T_7, _PC_module_io_in_T_2, _PC_module_io_in_T_6) @[Mux.scala 80:57]
    PC_module.io.in <= _PC_module_io_in_T_8 @[RISC5.scala 99:17]
    node _Jalr_module_io_imme_T = asUInt(a) @[RISC5.scala 105:26]
    Jalr_module.io.imme <= _Jalr_module_io_imme_T @[RISC5.scala 105:21]
    node _Jalr_module_io_rdata1_T = asUInt(RegFile_module.io.rdata1) @[RISC5.scala 106:51]
    Jalr_module.io.rdata1 <= _Jalr_module_io_rdata1_T @[RISC5.scala 106:23]
    Branch_module.io.fnct3 <= Alu_Control_module.io.func3 @[RISC5.scala 108:24]
    Branch_module.io.branch <= Control_module.io.branch @[RISC5.scala 109:25]
    Branch_module.io.arg_x <= RegFile_module.io.rdata1 @[RISC5.scala 110:24]
    Branch_module.io.arg_y <= RegFile_module.io.rdata2 @[RISC5.scala 111:24]
    node _RegFile_module_io_w_data_T = eq(UInt<1>("h01"), Control_module.io.men_to_reg) @[Mux.scala 80:60]
    node _RegFile_module_io_w_data_T_1 = mux(_RegFile_module_io_w_data_T, DataMem_module.io.dataOut, ALU_1_module.io.out) @[Mux.scala 80:57]
    RegFile_module.io.w_data <= _RegFile_module_io_w_data_T_1 @[RISC5.scala 113:26]
    node _V_Csr_module_io_vl_writeback_T = asUInt(ALU_1_module.io.out) @[RISC5.scala 117:53]
    V_Csr_module.io.vl_writeback <= _V_Csr_module_io_vl_writeback_T @[RISC5.scala 117:30]
    io.out <= asSInt(UInt<1>("h00")) @[RISC5.scala 121:8]
    io.inst <= InstMem1_module.io.data @[RISC5.scala 122:9]
    io.w_reg_out <= RegFile_module.io.w_reg @[RISC5.scala 123:14]
    node _io_reg_out_T = asUInt(RegFile_module.io.w_data) @[RISC5.scala 124:40]
    io.reg_out <= _io_reg_out_T @[RISC5.scala 124:12]
    io.data_mem_addr <= DataMem_module.io.addr @[RISC5.scala 125:18]
    node _io_data_mem_dataIn_T = asUInt(DataMem_module.io.dataIn) @[RISC5.scala 126:48]
    io.data_mem_dataIn <= _io_data_mem_dataIn_T @[RISC5.scala 126:20]
    io.b_out <= Branch_module.io.br_taken @[RISC5.scala 127:10]
    io.b_2x1mux <= b @[RISC5.scala 128:13]
    io.b_4x1mux <= PC_module.io.in @[RISC5.scala 129:13]
    io.avl_value <= d @[RISC5.scala 130:14]
    io.vlmax_value <= Vlmax_module.io.vlmax @[RISC5.scala 131:16]
    
