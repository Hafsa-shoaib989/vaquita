;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<32>, out : SInt<32>}
    
    reg reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[PC.scala 11:18]
    io.out <= reg @[PC.scala 12:8]
    reg <= io.in @[PC.scala 13:5]
    
  module Program_Counter : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[PC4.scala 11:8]
    node _io_out_T = add(io.pc, UInt<32>("h04")) @[PC4.scala 12:17]
    node _io_out_T_1 = tail(_io_out_T, 1) @[PC4.scala 12:17]
    io.out <= _io_out_T_1 @[PC4.scala 12:8]
    
  module InstMem1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, data : UInt<32>}
    
    cmem imem : UInt<32>[1024] @[INST_MEM.scala 17:16]
    node _io_data_T = bits(io.addr, 9, 0) @[INST_MEM.scala 20:17]
    infer mport io_data_MPORT = imem[_io_data_T], clock @[INST_MEM.scala 20:17]
    io.data <= io_data_MPORT @[INST_MEM.scala 20:9]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, flip rs1_no : UInt<5>, flip rd_no : UInt<5>, flip fun3 : UInt<3>, flip fun6 : UInt<6>, mem_write : UInt<1>, branch : UInt<1>, mem_read : UInt<1>, reg_write : UInt<1>, men_to_reg : UInt<1>, alu_operation : UInt<4>, operand_A : UInt<3>, operand_B : UInt<2>, extend : UInt<2>, next_pc_sel : UInt<2>, avl_ope : UInt<2>, is_I : UInt<1>, is_V : UInt<1>, csr_reg_write : UInt<1>, V_opeA : UInt<2>, V_opeB : UInt<2>, V_imm : UInt<2>, V_men_to_reg : UInt<1>}
    
    io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 35:15]
    node _T = eq(io.opcode, UInt<6>("h033")) @[CONTROL.scala 37:18]
    when _T : @[CONTROL.scala 37:29]
      io.mem_write <= UInt<1>("h00") @[CONTROL.scala 38:18]
      io.branch <= UInt<1>("h00") @[CONTROL.scala 39:15]
      io.mem_read <= UInt<1>("h00") @[CONTROL.scala 40:17]
      io.reg_write <= UInt<1>("h01") @[CONTROL.scala 41:18]
      io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 42:19]
      io.alu_operation <= UInt<1>("h00") @[CONTROL.scala 43:22]
      io.operand_A <= UInt<1>("h00") @[CONTROL.scala 44:18]
      io.operand_B <= UInt<1>("h00") @[CONTROL.scala 45:18]
      io.extend <= UInt<1>("h00") @[CONTROL.scala 46:15]
      io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 47:20]
      io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 48:16]
      io.is_I <= UInt<1>("h01") @[CONTROL.scala 49:13]
      io.is_V <= UInt<1>("h00") @[CONTROL.scala 50:13]
      io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 51:22]
      io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 52:15]
      io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 53:15]
      io.V_imm <= UInt<1>("h00") @[CONTROL.scala 54:14]
      io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 55:21]
      skip @[CONTROL.scala 37:29]
    else : @[CONTROL.scala 58:35]
      node _T_1 = eq(io.opcode, UInt<5>("h013")) @[CONTROL.scala 58:24]
      when _T_1 : @[CONTROL.scala 58:35]
        io.mem_write <= UInt<1>("h00") @[CONTROL.scala 59:18]
        io.branch <= UInt<1>("h00") @[CONTROL.scala 60:15]
        io.mem_read <= UInt<1>("h00") @[CONTROL.scala 61:17]
        io.reg_write <= UInt<1>("h01") @[CONTROL.scala 62:18]
        io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 63:19]
        io.alu_operation <= UInt<1>("h01") @[CONTROL.scala 64:22]
        io.operand_A <= UInt<1>("h00") @[CONTROL.scala 65:18]
        io.operand_B <= UInt<1>("h01") @[CONTROL.scala 66:18]
        io.extend <= UInt<1>("h00") @[CONTROL.scala 67:15]
        io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 68:20]
        io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 69:16]
        io.is_I <= UInt<1>("h01") @[CONTROL.scala 70:13]
        io.is_V <= UInt<1>("h00") @[CONTROL.scala 71:13]
        io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 72:22]
        io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 73:15]
        io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 74:15]
        io.V_imm <= UInt<1>("h00") @[CONTROL.scala 75:14]
        io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 76:21]
        skip @[CONTROL.scala 58:35]
      else : @[CONTROL.scala 79:35]
        node _T_2 = eq(io.opcode, UInt<6>("h023")) @[CONTROL.scala 79:24]
        when _T_2 : @[CONTROL.scala 79:35]
          io.mem_write <= UInt<1>("h01") @[CONTROL.scala 80:18]
          io.branch <= UInt<1>("h00") @[CONTROL.scala 81:15]
          io.mem_read <= UInt<1>("h00") @[CONTROL.scala 82:17]
          io.reg_write <= UInt<1>("h00") @[CONTROL.scala 83:18]
          io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 84:19]
          io.alu_operation <= UInt<3>("h05") @[CONTROL.scala 85:22]
          io.operand_A <= UInt<1>("h00") @[CONTROL.scala 86:18]
          io.operand_B <= UInt<1>("h01") @[CONTROL.scala 87:18]
          io.extend <= UInt<1>("h01") @[CONTROL.scala 88:15]
          io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 89:20]
          io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 90:16]
          io.is_I <= UInt<1>("h01") @[CONTROL.scala 91:13]
          io.is_V <= UInt<1>("h00") @[CONTROL.scala 92:13]
          io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 93:22]
          io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 94:15]
          io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 95:15]
          io.V_imm <= UInt<1>("h00") @[CONTROL.scala 96:14]
          io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 97:21]
          skip @[CONTROL.scala 79:35]
        else : @[CONTROL.scala 100:34]
          node _T_3 = eq(io.opcode, UInt<2>("h03")) @[CONTROL.scala 100:24]
          when _T_3 : @[CONTROL.scala 100:34]
            io.mem_write <= UInt<1>("h00") @[CONTROL.scala 101:18]
            io.branch <= UInt<1>("h00") @[CONTROL.scala 102:15]
            io.mem_read <= UInt<1>("h01") @[CONTROL.scala 103:17]
            io.reg_write <= UInt<1>("h01") @[CONTROL.scala 104:18]
            io.men_to_reg <= UInt<1>("h01") @[CONTROL.scala 105:19]
            io.alu_operation <= UInt<3>("h04") @[CONTROL.scala 106:22]
            io.operand_A <= UInt<1>("h00") @[CONTROL.scala 107:18]
            io.operand_B <= UInt<1>("h01") @[CONTROL.scala 108:18]
            io.extend <= UInt<1>("h00") @[CONTROL.scala 109:15]
            io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 110:20]
            io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 111:16]
            io.is_I <= UInt<1>("h01") @[CONTROL.scala 112:13]
            io.is_V <= UInt<1>("h00") @[CONTROL.scala 113:13]
            io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 114:22]
            io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 115:15]
            io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 116:15]
            io.V_imm <= UInt<1>("h00") @[CONTROL.scala 117:14]
            io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 118:21]
            skip @[CONTROL.scala 100:34]
          else : @[CONTROL.scala 121:35]
            node _T_4 = eq(io.opcode, UInt<7>("h063")) @[CONTROL.scala 121:24]
            when _T_4 : @[CONTROL.scala 121:35]
              io.mem_write <= UInt<1>("h00") @[CONTROL.scala 122:18]
              io.branch <= UInt<1>("h01") @[CONTROL.scala 123:15]
              io.mem_read <= UInt<1>("h00") @[CONTROL.scala 124:17]
              io.reg_write <= UInt<1>("h00") @[CONTROL.scala 125:18]
              io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 126:19]
              io.alu_operation <= UInt<2>("h02") @[CONTROL.scala 127:22]
              io.operand_A <= UInt<1>("h00") @[CONTROL.scala 128:18]
              io.operand_B <= UInt<1>("h00") @[CONTROL.scala 129:18]
              io.extend <= UInt<1>("h00") @[CONTROL.scala 130:15]
              io.next_pc_sel <= UInt<1>("h01") @[CONTROL.scala 131:20]
              io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 132:16]
              io.is_I <= UInt<1>("h01") @[CONTROL.scala 133:13]
              io.is_V <= UInt<1>("h00") @[CONTROL.scala 134:13]
              io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 135:22]
              io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 136:15]
              io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 137:15]
              io.V_imm <= UInt<1>("h00") @[CONTROL.scala 138:14]
              io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 139:21]
              skip @[CONTROL.scala 121:35]
            else : @[CONTROL.scala 142:36]
              node _T_5 = eq(io.opcode, UInt<7>("h06f")) @[CONTROL.scala 142:24]
              when _T_5 : @[CONTROL.scala 142:36]
                io.mem_write <= UInt<1>("h00") @[CONTROL.scala 143:18]
                io.branch <= UInt<1>("h00") @[CONTROL.scala 144:15]
                io.mem_read <= UInt<1>("h00") @[CONTROL.scala 145:17]
                io.reg_write <= UInt<1>("h01") @[CONTROL.scala 146:18]
                io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 147:19]
                io.alu_operation <= UInt<2>("h03") @[CONTROL.scala 148:22]
                io.operand_A <= UInt<1>("h01") @[CONTROL.scala 149:18]
                io.operand_B <= UInt<1>("h00") @[CONTROL.scala 150:18]
                io.extend <= UInt<1>("h00") @[CONTROL.scala 151:15]
                io.next_pc_sel <= UInt<2>("h02") @[CONTROL.scala 152:20]
                io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 153:16]
                io.is_I <= UInt<1>("h01") @[CONTROL.scala 154:13]
                io.is_V <= UInt<1>("h00") @[CONTROL.scala 155:13]
                io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 156:22]
                io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 157:15]
                io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 158:15]
                io.V_imm <= UInt<1>("h00") @[CONTROL.scala 159:14]
                io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 160:21]
                skip @[CONTROL.scala 142:36]
              else : @[CONTROL.scala 163:36]
                node _T_6 = eq(io.opcode, UInt<7>("h067")) @[CONTROL.scala 163:24]
                when _T_6 : @[CONTROL.scala 163:36]
                  io.mem_write <= UInt<1>("h00") @[CONTROL.scala 164:18]
                  io.branch <= UInt<1>("h00") @[CONTROL.scala 165:15]
                  io.mem_read <= UInt<1>("h00") @[CONTROL.scala 166:17]
                  io.reg_write <= UInt<1>("h01") @[CONTROL.scala 167:18]
                  io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 168:19]
                  io.alu_operation <= UInt<2>("h03") @[CONTROL.scala 169:22]
                  io.operand_A <= UInt<1>("h01") @[CONTROL.scala 170:18]
                  io.operand_B <= UInt<1>("h00") @[CONTROL.scala 171:18]
                  io.extend <= UInt<1>("h00") @[CONTROL.scala 172:15]
                  io.next_pc_sel <= UInt<2>("h03") @[CONTROL.scala 173:20]
                  io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 174:16]
                  io.is_I <= UInt<1>("h01") @[CONTROL.scala 175:13]
                  io.is_V <= UInt<1>("h00") @[CONTROL.scala 176:13]
                  io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 177:22]
                  io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 178:15]
                  io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 179:15]
                  io.V_imm <= UInt<1>("h00") @[CONTROL.scala 180:14]
                  io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 181:21]
                  skip @[CONTROL.scala 163:36]
                else : @[CONTROL.scala 184:35]
                  node _T_7 = eq(io.opcode, UInt<6>("h037")) @[CONTROL.scala 184:24]
                  when _T_7 : @[CONTROL.scala 184:35]
                    io.mem_write <= UInt<1>("h00") @[CONTROL.scala 185:18]
                    io.branch <= UInt<1>("h00") @[CONTROL.scala 186:15]
                    io.mem_read <= UInt<1>("h00") @[CONTROL.scala 187:17]
                    io.reg_write <= UInt<1>("h01") @[CONTROL.scala 188:18]
                    io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 189:19]
                    io.alu_operation <= UInt<3>("h06") @[CONTROL.scala 190:22]
                    io.operand_A <= UInt<2>("h03") @[CONTROL.scala 191:18]
                    io.operand_B <= UInt<1>("h01") @[CONTROL.scala 192:18]
                    io.extend <= UInt<2>("h02") @[CONTROL.scala 193:15]
                    io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 194:20]
                    io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 195:16]
                    io.is_I <= UInt<1>("h01") @[CONTROL.scala 196:13]
                    io.is_V <= UInt<1>("h00") @[CONTROL.scala 197:13]
                    io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 198:22]
                    io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 199:15]
                    io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 200:15]
                    io.V_imm <= UInt<1>("h00") @[CONTROL.scala 201:14]
                    io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 202:21]
                    skip @[CONTROL.scala 184:35]
                  else : @[CONTROL.scala 205:35]
                    node _T_8 = eq(io.opcode, UInt<5>("h017")) @[CONTROL.scala 205:24]
                    when _T_8 : @[CONTROL.scala 205:35]
                      io.mem_write <= UInt<1>("h00") @[CONTROL.scala 206:18]
                      io.branch <= UInt<1>("h00") @[CONTROL.scala 207:15]
                      io.mem_read <= UInt<1>("h00") @[CONTROL.scala 208:17]
                      io.reg_write <= UInt<1>("h01") @[CONTROL.scala 209:18]
                      io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 210:19]
                      io.alu_operation <= UInt<3>("h07") @[CONTROL.scala 211:22]
                      io.operand_A <= UInt<2>("h02") @[CONTROL.scala 212:18]
                      io.operand_B <= UInt<1>("h01") @[CONTROL.scala 213:18]
                      io.extend <= UInt<2>("h02") @[CONTROL.scala 214:15]
                      io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 215:20]
                      io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 216:16]
                      io.is_I <= UInt<1>("h01") @[CONTROL.scala 217:13]
                      io.is_V <= UInt<1>("h00") @[CONTROL.scala 218:13]
                      io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 219:22]
                      io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 220:15]
                      io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 221:15]
                      io.V_imm <= UInt<1>("h00") @[CONTROL.scala 222:14]
                      io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 223:21]
                      skip @[CONTROL.scala 205:35]
                    else : @[CONTROL.scala 226:53]
                      node _T_9 = eq(io.opcode, UInt<7>("h057")) @[CONTROL.scala 226:24]
                      node _T_10 = eq(io.fun3, UInt<3>("h07")) @[CONTROL.scala 226:44]
                      node _T_11 = and(_T_9, _T_10) @[CONTROL.scala 226:33]
                      when _T_11 : @[CONTROL.scala 226:53]
                        io.mem_write <= UInt<1>("h00") @[CONTROL.scala 227:18]
                        io.branch <= UInt<1>("h00") @[CONTROL.scala 228:15]
                        io.mem_read <= UInt<1>("h00") @[CONTROL.scala 229:17]
                        io.reg_write <= UInt<1>("h01") @[CONTROL.scala 230:18]
                        io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 231:19]
                        io.alu_operation <= UInt<1>("h00") @[CONTROL.scala 232:22]
                        io.operand_A <= UInt<3>("h04") @[CONTROL.scala 233:18]
                        io.operand_B <= UInt<2>("h02") @[CONTROL.scala 234:18]
                        io.extend <= UInt<1>("h00") @[CONTROL.scala 235:15]
                        io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 236:20]
                        io.is_I <= UInt<1>("h00") @[CONTROL.scala 237:13]
                        io.is_V <= UInt<1>("h01") @[CONTROL.scala 238:13]
                        io.csr_reg_write <= UInt<1>("h01") @[CONTROL.scala 239:22]
                        io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 240:15]
                        io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 241:15]
                        io.V_imm <= UInt<1>("h00") @[CONTROL.scala 242:14]
                        io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 243:21]
                        node _T_12 = neq(io.rs1_no, UInt<1>("h00")) @[CONTROL.scala 245:21]
                        when _T_12 : @[CONTROL.scala 245:30]
                          io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 246:20]
                          skip @[CONTROL.scala 245:30]
                        else : @[CONTROL.scala 247:57]
                          node _T_13 = eq(io.rs1_no, UInt<1>("h00")) @[CONTROL.scala 247:28]
                          node _T_14 = neq(io.rd_no, UInt<1>("h00")) @[CONTROL.scala 247:48]
                          node _T_15 = and(_T_13, _T_14) @[CONTROL.scala 247:36]
                          when _T_15 : @[CONTROL.scala 247:57]
                            io.avl_ope <= UInt<1>("h01") @[CONTROL.scala 248:20]
                            skip @[CONTROL.scala 247:57]
                          else : @[CONTROL.scala 249:57]
                            node _T_16 = eq(io.rs1_no, UInt<1>("h00")) @[CONTROL.scala 249:28]
                            node _T_17 = eq(io.rd_no, UInt<1>("h00")) @[CONTROL.scala 249:48]
                            node _T_18 = and(_T_16, _T_17) @[CONTROL.scala 249:36]
                            when _T_18 : @[CONTROL.scala 249:57]
                              io.avl_ope <= UInt<2>("h02") @[CONTROL.scala 250:20]
                              skip @[CONTROL.scala 249:57]
                            else : @[CONTROL.scala 251:17]
                              io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 252:20]
                              skip @[CONTROL.scala 251:17]
                        skip @[CONTROL.scala 226:53]
                      else : @[CONTROL.scala 255:53]
                        node _T_19 = eq(io.opcode, UInt<7>("h057")) @[CONTROL.scala 255:24]
                        node _T_20 = eq(io.fun3, UInt<2>("h03")) @[CONTROL.scala 255:44]
                        node _T_21 = and(_T_19, _T_20) @[CONTROL.scala 255:33]
                        when _T_21 : @[CONTROL.scala 255:53]
                          io.mem_write <= UInt<1>("h00") @[CONTROL.scala 256:18]
                          io.branch <= UInt<1>("h00") @[CONTROL.scala 257:15]
                          io.mem_read <= UInt<1>("h00") @[CONTROL.scala 258:17]
                          io.reg_write <= UInt<1>("h01") @[CONTROL.scala 259:18]
                          io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 260:19]
                          io.alu_operation <= UInt<1>("h01") @[CONTROL.scala 261:22]
                          io.operand_A <= UInt<1>("h00") @[CONTROL.scala 262:18]
                          io.operand_B <= UInt<1>("h00") @[CONTROL.scala 263:18]
                          io.extend <= UInt<1>("h00") @[CONTROL.scala 264:15]
                          io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 265:20]
                          io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 266:16]
                          io.is_I <= UInt<1>("h00") @[CONTROL.scala 267:13]
                          io.is_V <= UInt<1>("h01") @[CONTROL.scala 268:13]
                          io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 269:22]
                          io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 270:15]
                          io.V_opeB <= UInt<1>("h01") @[CONTROL.scala 271:15]
                          io.V_imm <= UInt<1>("h01") @[CONTROL.scala 272:14]
                          io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 273:21]
                          skip @[CONTROL.scala 255:53]
                        else : @[CONTROL.scala 276:53]
                          node _T_22 = eq(io.opcode, UInt<7>("h057")) @[CONTROL.scala 276:24]
                          node _T_23 = eq(io.fun3, UInt<1>("h00")) @[CONTROL.scala 276:44]
                          node _T_24 = and(_T_22, _T_23) @[CONTROL.scala 276:33]
                          when _T_24 : @[CONTROL.scala 276:53]
                            io.mem_write <= UInt<1>("h00") @[CONTROL.scala 277:18]
                            io.branch <= UInt<1>("h00") @[CONTROL.scala 278:15]
                            io.mem_read <= UInt<1>("h00") @[CONTROL.scala 279:17]
                            io.reg_write <= UInt<1>("h01") @[CONTROL.scala 280:18]
                            io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 281:19]
                            io.alu_operation <= UInt<2>("h02") @[CONTROL.scala 282:22]
                            io.operand_A <= UInt<1>("h00") @[CONTROL.scala 283:18]
                            io.operand_B <= UInt<1>("h00") @[CONTROL.scala 284:18]
                            io.extend <= UInt<1>("h00") @[CONTROL.scala 285:15]
                            io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 286:20]
                            io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 287:16]
                            io.is_I <= UInt<1>("h00") @[CONTROL.scala 288:13]
                            io.is_V <= UInt<1>("h01") @[CONTROL.scala 289:13]
                            io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 290:22]
                            io.V_opeA <= UInt<1>("h01") @[CONTROL.scala 291:15]
                            io.V_opeB <= UInt<1>("h01") @[CONTROL.scala 292:15]
                            io.V_imm <= UInt<1>("h00") @[CONTROL.scala 293:14]
                            io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 294:21]
                            skip @[CONTROL.scala 276:53]
                          else : @[CONTROL.scala 297:73]
                            node _T_25 = eq(io.opcode, UInt<7>("h057")) @[CONTROL.scala 297:24]
                            node _T_26 = eq(io.fun3, UInt<3>("h04")) @[CONTROL.scala 297:44]
                            node _T_27 = and(_T_25, _T_26) @[CONTROL.scala 297:33]
                            node _T_28 = eq(io.fun6, UInt<5>("h017")) @[CONTROL.scala 297:63]
                            node _T_29 = and(_T_27, _T_28) @[CONTROL.scala 297:52]
                            when _T_29 : @[CONTROL.scala 297:73]
                              io.mem_write <= UInt<1>("h00") @[CONTROL.scala 298:18]
                              io.branch <= UInt<1>("h00") @[CONTROL.scala 299:15]
                              io.mem_read <= UInt<1>("h00") @[CONTROL.scala 300:17]
                              io.reg_write <= UInt<1>("h01") @[CONTROL.scala 301:18]
                              io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 302:19]
                              io.alu_operation <= UInt<2>("h03") @[CONTROL.scala 303:22]
                              io.operand_A <= UInt<1>("h00") @[CONTROL.scala 304:18]
                              io.operand_B <= UInt<1>("h00") @[CONTROL.scala 305:18]
                              io.extend <= UInt<1>("h00") @[CONTROL.scala 306:15]
                              io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 307:20]
                              io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 308:16]
                              io.is_I <= UInt<1>("h00") @[CONTROL.scala 309:13]
                              io.is_V <= UInt<1>("h01") @[CONTROL.scala 310:13]
                              io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 311:22]
                              io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 312:15]
                              io.V_opeB <= UInt<1>("h01") @[CONTROL.scala 313:15]
                              io.V_imm <= UInt<1>("h00") @[CONTROL.scala 314:14]
                              io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 315:21]
                              skip @[CONTROL.scala 297:73]
                            else : @[CONTROL.scala 317:13]
                              io.mem_write <= UInt<1>("h00") @[CONTROL.scala 318:18]
                              io.branch <= UInt<1>("h00") @[CONTROL.scala 319:15]
                              io.mem_read <= UInt<1>("h00") @[CONTROL.scala 320:17]
                              io.reg_write <= UInt<1>("h00") @[CONTROL.scala 321:18]
                              io.men_to_reg <= UInt<1>("h00") @[CONTROL.scala 322:19]
                              io.alu_operation <= UInt<1>("h00") @[CONTROL.scala 323:22]
                              io.operand_A <= UInt<1>("h00") @[CONTROL.scala 324:18]
                              io.operand_B <= UInt<1>("h00") @[CONTROL.scala 325:18]
                              io.extend <= UInt<1>("h00") @[CONTROL.scala 326:15]
                              io.next_pc_sel <= UInt<1>("h00") @[CONTROL.scala 327:20]
                              io.avl_ope <= UInt<1>("h00") @[CONTROL.scala 328:16]
                              io.is_I <= UInt<1>("h00") @[CONTROL.scala 329:13]
                              io.is_V <= UInt<1>("h00") @[CONTROL.scala 330:13]
                              io.csr_reg_write <= UInt<1>("h00") @[CONTROL.scala 331:22]
                              io.V_opeA <= UInt<1>("h00") @[CONTROL.scala 332:15]
                              io.V_opeB <= UInt<1>("h00") @[CONTROL.scala 333:15]
                              io.V_imm <= UInt<1>("h00") @[CONTROL.scala 334:14]
                              io.V_men_to_reg <= UInt<1>("h00") @[CONTROL.scala 335:21]
                              skip @[CONTROL.scala 317:13]
    
  module Immde : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc : UInt<32>, flip I_instruction : UInt<1>, flip V_instruction : UInt<1>, I_type : SInt<32>, S_type : SInt<32>, SB_type : SInt<32>, U_type : SInt<32>, UJ_type : SInt<32>, V_I_type : SInt<64>}
    
    node _T = eq(io.I_instruction, UInt<1>("h01")) @[IMMEDIATE.scala 21:24]
    when _T : @[IMMEDIATE.scala 21:33]
      node _io_I_type_T = bits(io.instr, 31, 31) @[IMMEDIATE.scala 22:39]
      node _io_I_type_T_1 = bits(_io_I_type_T, 0, 0) @[Bitwise.scala 72:15]
      node io_I_type_hi = mux(_io_I_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node io_I_type_lo = bits(io.instr, 31, 20) @[IMMEDIATE.scala 22:54]
      node _io_I_type_T_2 = cat(io_I_type_hi, io_I_type_lo) @[Cat.scala 30:58]
      node _io_I_type_T_3 = asSInt(_io_I_type_T_2) @[IMMEDIATE.scala 22:63]
      io.I_type <= _io_I_type_T_3 @[IMMEDIATE.scala 22:15]
      node _io_S_type_T = bits(io.instr, 31, 31) @[IMMEDIATE.scala 24:39]
      node _io_S_type_T_1 = bits(_io_S_type_T, 0, 0) @[Bitwise.scala 72:15]
      node io_S_type_hi_hi = mux(_io_S_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node io_S_type_hi_lo = bits(io.instr, 31, 25) @[IMMEDIATE.scala 24:54]
      node io_S_type_lo = bits(io.instr, 11, 7) @[IMMEDIATE.scala 24:71]
      node io_S_type_hi = cat(io_S_type_hi_hi, io_S_type_hi_lo) @[Cat.scala 30:58]
      node _io_S_type_T_2 = cat(io_S_type_hi, io_S_type_lo) @[Cat.scala 30:58]
      node _io_S_type_T_3 = asSInt(_io_S_type_T_2) @[IMMEDIATE.scala 24:79]
      io.S_type <= _io_S_type_T_3 @[IMMEDIATE.scala 24:15]
      node _a_T = bits(io.instr, 31, 31) @[IMMEDIATE.scala 26:34]
      node _a_T_1 = bits(_a_T, 0, 0) @[Bitwise.scala 72:15]
      node a_hi_hi_hi = mux(_a_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
      node a_hi_hi_lo = bits(io.instr, 31, 31) @[IMMEDIATE.scala 26:49]
      node a_hi_lo = bits(io.instr, 7, 7) @[IMMEDIATE.scala 26:63]
      node a_lo_hi_hi = bits(io.instr, 30, 25) @[IMMEDIATE.scala 26:76]
      node a_lo_hi_lo = bits(io.instr, 11, 8) @[IMMEDIATE.scala 26:93]
      node a_lo_hi = cat(a_lo_hi_hi, a_lo_hi_lo) @[Cat.scala 30:58]
      node a_lo = cat(a_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
      node a_hi_hi = cat(a_hi_hi_hi, a_hi_hi_lo) @[Cat.scala 30:58]
      node a_hi = cat(a_hi_hi, a_hi_lo) @[Cat.scala 30:58]
      node _a_T_2 = cat(a_hi, a_lo) @[Cat.scala 30:58]
      node a = asSInt(_a_T_2) @[IMMEDIATE.scala 26:106]
      node _io_SB_type_T = asSInt(io.pc) @[IMMEDIATE.scala 27:29]
      node _io_SB_type_T_1 = add(a, _io_SB_type_T) @[IMMEDIATE.scala 27:21]
      node _io_SB_type_T_2 = tail(_io_SB_type_T_1, 1) @[IMMEDIATE.scala 27:21]
      node _io_SB_type_T_3 = asSInt(_io_SB_type_T_2) @[IMMEDIATE.scala 27:21]
      io.SB_type <= _io_SB_type_T_3 @[IMMEDIATE.scala 27:16]
      node io_U_type_hi = bits(io.instr, 31, 12) @[IMMEDIATE.scala 29:30]
      node io_U_type_lo = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
      node _io_U_type_T = cat(io_U_type_hi, io_U_type_lo) @[Cat.scala 30:58]
      node _io_U_type_T_1 = asSInt(_io_U_type_T) @[IMMEDIATE.scala 29:57]
      io.U_type <= _io_U_type_T_1 @[IMMEDIATE.scala 29:15]
      node _b_T = bits(io.instr, 31, 31) @[IMMEDIATE.scala 31:34]
      node _b_T_1 = bits(_b_T, 0, 0) @[Bitwise.scala 72:15]
      node b_hi_hi_hi = mux(_b_T_1, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
      node b_hi_hi_lo = bits(io.instr, 31, 31) @[IMMEDIATE.scala 31:49]
      node b_hi_lo = bits(io.instr, 19, 12) @[IMMEDIATE.scala 31:63]
      node b_lo_hi_hi = bits(io.instr, 20, 20) @[IMMEDIATE.scala 31:80]
      node b_lo_hi_lo = bits(io.instr, 30, 21) @[IMMEDIATE.scala 31:94]
      node b_lo_hi = cat(b_lo_hi_hi, b_lo_hi_lo) @[Cat.scala 30:58]
      node b_lo = cat(b_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
      node b_hi_hi = cat(b_hi_hi_hi, b_hi_hi_lo) @[Cat.scala 30:58]
      node b_hi = cat(b_hi_hi, b_hi_lo) @[Cat.scala 30:58]
      node _b_T_2 = cat(b_hi, b_lo) @[Cat.scala 30:58]
      node b = asSInt(_b_T_2) @[IMMEDIATE.scala 31:108]
      node _io_UJ_type_T = asSInt(io.pc) @[IMMEDIATE.scala 32:29]
      node _io_UJ_type_T_1 = add(b, _io_UJ_type_T) @[IMMEDIATE.scala 32:21]
      node _io_UJ_type_T_2 = tail(_io_UJ_type_T_1, 1) @[IMMEDIATE.scala 32:21]
      node _io_UJ_type_T_3 = asSInt(_io_UJ_type_T_2) @[IMMEDIATE.scala 32:21]
      io.UJ_type <= _io_UJ_type_T_3 @[IMMEDIATE.scala 32:16]
      io.V_I_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 34:17]
      skip @[IMMEDIATE.scala 21:33]
    else : @[IMMEDIATE.scala 36:39]
      node _T_1 = eq(io.V_instruction, UInt<1>("h01")) @[IMMEDIATE.scala 36:30]
      when _T_1 : @[IMMEDIATE.scala 36:39]
        io.I_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 37:15]
        io.S_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 38:15]
        io.SB_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 39:16]
        io.U_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 40:15]
        io.UJ_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 41:16]
        node io_V_I_type_hi = mux(UInt<1>("h00"), UInt<59>("h07ffffffffffffff"), UInt<59>("h00")) @[Bitwise.scala 72:12]
        node io_V_I_type_lo = bits(io.instr, 19, 15) @[IMMEDIATE.scala 42:47]
        node _io_V_I_type_T = cat(io_V_I_type_hi, io_V_I_type_lo) @[Cat.scala 30:58]
        node _io_V_I_type_T_1 = asSInt(_io_V_I_type_T) @[IMMEDIATE.scala 42:57]
        io.V_I_type <= _io_V_I_type_T_1 @[IMMEDIATE.scala 42:17]
        skip @[IMMEDIATE.scala 36:39]
      else : @[IMMEDIATE.scala 44:13]
        io.I_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 45:15]
        io.S_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 46:15]
        io.SB_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 47:16]
        io.U_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 48:15]
        io.UJ_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 49:16]
        io.V_I_type <= asSInt(UInt<1>("h00")) @[IMMEDIATE.scala 50:17]
        skip @[IMMEDIATE.scala 44:13]
    
  module RegFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip reg_write : UInt<1>, flip w_reg : UInt<5>, flip w_data : SInt<32>, rdata1 : SInt<32>, rdata2 : SInt<32>}
    
    wire _regs_WIRE : SInt<32>[32] @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[0] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[1] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[2] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[3] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[4] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[5] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[6] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[7] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[8] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[9] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[10] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[11] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[12] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[13] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[14] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[15] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[16] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[17] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[18] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[19] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[20] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[21] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[22] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[23] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[24] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[25] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[26] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[27] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[28] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[29] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[30] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    _regs_WIRE[31] <= asSInt(UInt<32>("h00")) @[SCALAR_REGISTER.scala 16:28]
    reg regs : SInt<32>[32], clock with : (reset => (reset, _regs_WIRE)) @[SCALAR_REGISTER.scala 16:19]
    node _io_rdata1_T = orr(io.rs1) @[SCALAR_REGISTER.scala 18:29]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, regs[io.rs1], asSInt(UInt<1>("h00"))) @[SCALAR_REGISTER.scala 18:18]
    io.rdata1 <= _io_rdata1_T_1 @[SCALAR_REGISTER.scala 18:11]
    node _io_rdata2_T = orr(io.rs2) @[SCALAR_REGISTER.scala 19:29]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, regs[io.rs2], asSInt(UInt<1>("h00"))) @[SCALAR_REGISTER.scala 19:18]
    io.rdata2 <= _io_rdata2_T_1 @[SCALAR_REGISTER.scala 19:11]
    node _T = orr(io.w_reg) @[SCALAR_REGISTER.scala 21:33]
    node _T_1 = and(io.reg_write, _T) @[SCALAR_REGISTER.scala 21:21]
    when _T_1 : @[SCALAR_REGISTER.scala 21:39]
      regs[io.w_reg] <= io.w_data @[SCALAR_REGISTER.scala 22:23]
      skip @[SCALAR_REGISTER.scala 21:39]
    
  module Alu_Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip func3 : UInt<3>, flip func7 : UInt<1>, flip aluOp : UInt<3>, flip I_inst : UInt<1>, flip V_inst : UInt<1>, flip func6 : UInt<6>, out : UInt<9>, out_V : UInt<1>}
    
    node _T = eq(io.I_inst, UInt<1>("h01")) @[ALUCONTROL.scala 18:17]
    when _T : @[ALUCONTROL.scala 18:26]
      node _T_1 = eq(io.aluOp, UInt<1>("h00")) @[ALUCONTROL.scala 20:20]
      when _T_1 : @[ALUCONTROL.scala 20:29]
        node io_out_hi = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
        node _io_out_T = cat(io_out_hi, io.func3) @[Cat.scala 30:58]
        io.out <= _io_out_T @[ALUCONTROL.scala 21:16]
        io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 22:18]
        skip @[ALUCONTROL.scala 20:29]
      else : @[ALUCONTROL.scala 25:35]
        node _T_2 = eq(io.aluOp, UInt<1>("h01")) @[ALUCONTROL.scala 25:26]
        when _T_2 : @[ALUCONTROL.scala 25:35]
          node _io_out_T_1 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
          io.out <= _io_out_T_1 @[ALUCONTROL.scala 26:16]
          io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 27:18]
          skip @[ALUCONTROL.scala 25:35]
        else : @[ALUCONTROL.scala 30:35]
          node _T_3 = eq(io.aluOp, UInt<2>("h02")) @[ALUCONTROL.scala 30:26]
          when _T_3 : @[ALUCONTROL.scala 30:35]
            node io_out_lo = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
            node io_out_hi_1 = cat(UInt<1>("h00"), UInt<1>("h01")) @[Cat.scala 30:58]
            node _io_out_T_2 = cat(io_out_hi_1, io_out_lo) @[Cat.scala 30:58]
            io.out <= _io_out_T_2 @[ALUCONTROL.scala 31:16]
            io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 32:18]
            skip @[ALUCONTROL.scala 30:35]
          else : @[ALUCONTROL.scala 35:35]
            node _T_4 = eq(io.aluOp, UInt<2>("h03")) @[ALUCONTROL.scala 35:26]
            when _T_4 : @[ALUCONTROL.scala 35:35]
              io.out <= UInt<5>("h01f") @[ALUCONTROL.scala 36:16]
              io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 37:18]
              skip @[ALUCONTROL.scala 35:35]
            else : @[ALUCONTROL.scala 40:35]
              node _T_5 = eq(io.aluOp, UInt<3>("h04")) @[ALUCONTROL.scala 40:26]
              when _T_5 : @[ALUCONTROL.scala 40:35]
                io.out <= UInt<1>("h00") @[ALUCONTROL.scala 41:16]
                io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 42:18]
                skip @[ALUCONTROL.scala 40:35]
              else : @[ALUCONTROL.scala 45:35]
                node _T_6 = eq(io.aluOp, UInt<3>("h05")) @[ALUCONTROL.scala 45:26]
                when _T_6 : @[ALUCONTROL.scala 45:35]
                  io.out <= UInt<1>("h00") @[ALUCONTROL.scala 46:16]
                  io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 47:18]
                  skip @[ALUCONTROL.scala 45:35]
                else : @[ALUCONTROL.scala 50:35]
                  node _T_7 = eq(io.aluOp, UInt<3>("h06")) @[ALUCONTROL.scala 50:26]
                  when _T_7 : @[ALUCONTROL.scala 50:35]
                    io.out <= UInt<1>("h00") @[ALUCONTROL.scala 51:16]
                    io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 52:18]
                    skip @[ALUCONTROL.scala 50:35]
                  else : @[ALUCONTROL.scala 55:35]
                    node _T_8 = eq(io.aluOp, UInt<3>("h07")) @[ALUCONTROL.scala 55:26]
                    when _T_8 : @[ALUCONTROL.scala 55:35]
                      io.out <= UInt<1>("h00") @[ALUCONTROL.scala 56:16]
                      io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 57:18]
                      skip @[ALUCONTROL.scala 55:35]
                    else : @[ALUCONTROL.scala 59:16]
                      io.out <= UInt<1>("h00") @[ALUCONTROL.scala 60:16]
                      io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 61:18]
                      skip @[ALUCONTROL.scala 59:16]
      skip @[ALUCONTROL.scala 18:26]
    else : @[ALUCONTROL.scala 64:32]
      node _T_9 = eq(io.V_inst, UInt<1>("h01")) @[ALUCONTROL.scala 64:23]
      when _T_9 : @[ALUCONTROL.scala 64:32]
        node _T_10 = eq(io.aluOp, UInt<1>("h00")) @[ALUCONTROL.scala 66:20]
        when _T_10 : @[ALUCONTROL.scala 66:29]
          node _io_out_T_3 = cat(UInt<1>("h00"), io.func3) @[Cat.scala 30:58]
          io.out <= _io_out_T_3 @[ALUCONTROL.scala 67:16]
          io.out_V <= UInt<1>("h01") @[ALUCONTROL.scala 68:18]
          skip @[ALUCONTROL.scala 66:29]
        else : @[ALUCONTROL.scala 71:35]
          node _T_11 = eq(io.aluOp, UInt<1>("h01")) @[ALUCONTROL.scala 71:26]
          when _T_11 : @[ALUCONTROL.scala 71:35]
            node _io_out_T_4 = cat(io.func6, io.func3) @[Cat.scala 30:58]
            io.out <= _io_out_T_4 @[ALUCONTROL.scala 72:16]
            io.out_V <= UInt<1>("h01") @[ALUCONTROL.scala 73:18]
            skip @[ALUCONTROL.scala 71:35]
          else : @[ALUCONTROL.scala 76:35]
            node _T_12 = eq(io.aluOp, UInt<2>("h02")) @[ALUCONTROL.scala 76:26]
            when _T_12 : @[ALUCONTROL.scala 76:35]
              node _io_out_T_5 = cat(io.func6, io.func3) @[Cat.scala 30:58]
              io.out <= _io_out_T_5 @[ALUCONTROL.scala 77:16]
              io.out_V <= UInt<1>("h01") @[ALUCONTROL.scala 78:18]
              skip @[ALUCONTROL.scala 76:35]
            else : @[ALUCONTROL.scala 81:35]
              node _T_13 = eq(io.aluOp, UInt<2>("h03")) @[ALUCONTROL.scala 81:26]
              when _T_13 : @[ALUCONTROL.scala 81:35]
                node _io_out_T_6 = cat(io.func6, io.func3) @[Cat.scala 30:58]
                io.out <= _io_out_T_6 @[ALUCONTROL.scala 82:16]
                io.out_V <= UInt<1>("h01") @[ALUCONTROL.scala 83:18]
                skip @[ALUCONTROL.scala 81:35]
              else : @[ALUCONTROL.scala 85:17]
                io.out <= UInt<1>("h00") @[ALUCONTROL.scala 86:16]
                io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 87:18]
                skip @[ALUCONTROL.scala 85:17]
        skip @[ALUCONTROL.scala 64:32]
      else : @[ALUCONTROL.scala 90:13]
        io.out <= UInt<1>("h00") @[ALUCONTROL.scala 91:12]
        io.out_V <= UInt<1>("h00") @[ALUCONTROL.scala 92:14]
        skip @[ALUCONTROL.scala 90:13]
    
  module ALU_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_Op : UInt<9>, flip in_I : UInt<1>, flip in_V : UInt<1>, flip V_in_A : SInt<128>, flip V_in_B : SInt<128>, flip alu_sew : UInt<3>, flip alu_lmul : UInt<3>, flip alu_imm : SInt<64>, out : SInt<32>, V_out : SInt<128>}
    
    io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 63:8]
    io.V_out <= asSInt(UInt<1>("h00")) @[ALU.scala 64:10]
    wire out8 : SInt<8>[16] @[ALU.scala 68:19]
    out8[0] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[1] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[2] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[3] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[4] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[5] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[6] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[7] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[8] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[9] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[10] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[11] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[12] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[13] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[14] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    out8[15] <= asSInt(UInt<8>("h00")) @[ALU.scala 68:19]
    wire out16 : SInt<16>[8] @[ALU.scala 69:20]
    out16[0] <= asSInt(UInt<16>("h00")) @[ALU.scala 69:20]
    out16[1] <= asSInt(UInt<16>("h00")) @[ALU.scala 69:20]
    out16[2] <= asSInt(UInt<16>("h00")) @[ALU.scala 69:20]
    out16[3] <= asSInt(UInt<16>("h00")) @[ALU.scala 69:20]
    out16[4] <= asSInt(UInt<16>("h00")) @[ALU.scala 69:20]
    out16[5] <= asSInt(UInt<16>("h00")) @[ALU.scala 69:20]
    out16[6] <= asSInt(UInt<16>("h00")) @[ALU.scala 69:20]
    out16[7] <= asSInt(UInt<16>("h00")) @[ALU.scala 69:20]
    wire out32 : SInt<32>[4] @[ALU.scala 70:20]
    out32[0] <= asSInt(UInt<32>("h00")) @[ALU.scala 70:20]
    out32[1] <= asSInt(UInt<32>("h00")) @[ALU.scala 70:20]
    out32[2] <= asSInt(UInt<32>("h00")) @[ALU.scala 70:20]
    out32[3] <= asSInt(UInt<32>("h00")) @[ALU.scala 70:20]
    wire out64 : SInt<64>[2] @[ALU.scala 71:20]
    out64[0] <= asSInt(UInt<64>("h00")) @[ALU.scala 71:20]
    out64[1] <= asSInt(UInt<64>("h00")) @[ALU.scala 71:20]
    node _T = eq(io.in_I, UInt<1>("h01")) @[ALU.scala 74:15]
    when _T : @[ALU.scala 74:25]
      node _out_T = eq(io.alu_Op, UInt<9>("h00")) @[ALU.scala 76:23]
      node _out_T_1 = eq(io.alu_Op, UInt<9>("h00")) @[ALU.scala 76:48]
      node _out_T_2 = or(_out_T, _out_T_1) @[ALU.scala 76:35]
      node _out_T_3 = eq(io.alu_Op, UInt<9>("h00")) @[ALU.scala 76:74]
      node _out_T_4 = or(_out_T_2, _out_T_3) @[ALU.scala 76:61]
      node _out_T_5 = eq(io.alu_Op, UInt<9>("h00")) @[ALU.scala 76:98]
      node _out_T_6 = or(_out_T_4, _out_T_5) @[ALU.scala 76:85]
      node _out_T_7 = eq(io.alu_Op, UInt<9>("h00")) @[ALU.scala 76:122]
      node _out_T_8 = or(_out_T_6, _out_T_7) @[ALU.scala 76:109]
      node _out_T_9 = eq(io.alu_Op, UInt<9>("h00")) @[ALU.scala 76:147]
      node _out_T_10 = or(_out_T_8, _out_T_9) @[ALU.scala 76:134]
      node _out_T_11 = add(io.in_A, io.in_B) @[ALU.scala 76:171]
      node _out_T_12 = tail(_out_T_11, 1) @[ALU.scala 76:171]
      node _out_T_13 = asSInt(_out_T_12) @[ALU.scala 76:171]
      node _out_T_14 = eq(io.alu_Op, UInt<9>("h01")) @[ALU.scala 77:23]
      node _out_T_15 = eq(io.alu_Op, UInt<9>("h01")) @[ALU.scala 77:48]
      node _out_T_16 = or(_out_T_14, _out_T_15) @[ALU.scala 77:35]
      node _out_T_17 = asUInt(io.in_A) @[ALU.scala 77:71]
      node _out_T_18 = bits(io.in_B, 18, 0) @[ALU.scala 77:88]
      node _out_T_19 = dshl(_out_T_17, _out_T_18) @[ALU.scala 77:78]
      node _out_T_20 = asSInt(_out_T_19) @[ALU.scala 77:104]
      node _out_T_21 = eq(io.alu_Op, UInt<9>("h02")) @[ALU.scala 78:23]
      node _out_T_22 = eq(io.alu_Op, UInt<9>("h02")) @[ALU.scala 78:48]
      node _out_T_23 = or(_out_T_21, _out_T_22) @[ALU.scala 78:35]
      node _out_T_24 = lt(io.in_A, io.in_B) @[ALU.scala 78:74]
      node _out_T_25 = mux(_out_T_24, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 78:65]
      node _out_T_26 = eq(io.alu_Op, UInt<9>("h03")) @[ALU.scala 79:23]
      node _out_T_27 = eq(io.alu_Op, UInt<9>("h03")) @[ALU.scala 79:49]
      node _out_T_28 = or(_out_T_26, _out_T_27) @[ALU.scala 79:36]
      node _out_T_29 = lt(io.in_A, io.in_B) @[ALU.scala 79:76]
      node _out_T_30 = mux(_out_T_29, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[ALU.scala 79:67]
      node _out_T_31 = eq(io.alu_Op, UInt<9>("h04")) @[ALU.scala 80:23]
      node _out_T_32 = eq(io.alu_Op, UInt<9>("h04")) @[ALU.scala 80:48]
      node _out_T_33 = or(_out_T_31, _out_T_32) @[ALU.scala 80:35]
      node _out_T_34 = xor(io.in_A, io.in_B) @[ALU.scala 80:71]
      node _out_T_35 = asSInt(_out_T_34) @[ALU.scala 80:71]
      node _out_T_36 = eq(io.alu_Op, UInt<9>("h05")) @[ALU.scala 81:23]
      node _out_T_37 = eq(io.alu_Op, UInt<9>("h05")) @[ALU.scala 81:48]
      node _out_T_38 = or(_out_T_36, _out_T_37) @[ALU.scala 81:35]
      node _out_T_39 = asUInt(io.in_A) @[ALU.scala 81:71]
      node _out_T_40 = bits(io.in_B, 18, 0) @[ALU.scala 81:88]
      node _out_T_41 = dshr(_out_T_39, _out_T_40) @[ALU.scala 81:78]
      node _out_T_42 = asSInt(_out_T_41) @[ALU.scala 81:104]
      node _out_T_43 = eq(io.alu_Op, UInt<9>("h06")) @[ALU.scala 82:23]
      node _out_T_44 = eq(io.alu_Op, UInt<9>("h06")) @[ALU.scala 82:47]
      node _out_T_45 = or(_out_T_43, _out_T_44) @[ALU.scala 82:34]
      node _out_T_46 = or(io.in_A, io.in_B) @[ALU.scala 82:69]
      node _out_T_47 = asSInt(_out_T_46) @[ALU.scala 82:69]
      node _out_T_48 = eq(io.alu_Op, UInt<9>("h07")) @[ALU.scala 83:23]
      node _out_T_49 = eq(io.alu_Op, UInt<9>("h07")) @[ALU.scala 83:48]
      node _out_T_50 = or(_out_T_48, _out_T_49) @[ALU.scala 83:35]
      node _out_T_51 = and(io.in_A, io.in_B) @[ALU.scala 83:71]
      node _out_T_52 = asSInt(_out_T_51) @[ALU.scala 83:71]
      node _out_T_53 = eq(io.alu_Op, UInt<9>("h08")) @[ALU.scala 84:23]
      node _out_T_54 = sub(io.in_A, io.in_B) @[ALU.scala 84:45]
      node _out_T_55 = tail(_out_T_54, 1) @[ALU.scala 84:45]
      node _out_T_56 = asSInt(_out_T_55) @[ALU.scala 84:45]
      node _out_T_57 = eq(io.alu_Op, UInt<9>("h0d")) @[ALU.scala 85:23]
      node _out_T_58 = eq(io.alu_Op, UInt<9>("h0d")) @[ALU.scala 85:48]
      node _out_T_59 = or(_out_T_57, _out_T_58) @[ALU.scala 85:35]
      node _out_T_60 = asUInt(io.in_A) @[ALU.scala 85:71]
      node _out_T_61 = bits(io.in_B, 18, 0) @[ALU.scala 85:88]
      node _out_T_62 = dshr(_out_T_60, _out_T_61) @[ALU.scala 85:78]
      node _out_T_63 = asSInt(_out_T_62) @[ALU.scala 85:104]
      node _out_T_64 = eq(io.alu_Op, UInt<9>("h01f")) @[ALU.scala 86:23]
      node _out_T_65 = eq(io.alu_Op, UInt<9>("h01f")) @[ALU.scala 86:48]
      node _out_T_66 = or(_out_T_64, _out_T_65) @[ALU.scala 86:35]
      node _out_T_67 = mux(_out_T_66, io.in_A, asSInt(UInt<1>("h00"))) @[ALU.scala 86:12]
      node _out_T_68 = mux(_out_T_59, _out_T_63, _out_T_67) @[ALU.scala 85:12]
      node _out_T_69 = mux(_out_T_53, _out_T_56, _out_T_68) @[ALU.scala 84:12]
      node _out_T_70 = mux(_out_T_50, _out_T_52, _out_T_69) @[ALU.scala 83:12]
      node _out_T_71 = mux(_out_T_45, _out_T_47, _out_T_70) @[ALU.scala 82:12]
      node _out_T_72 = mux(_out_T_38, _out_T_42, _out_T_71) @[ALU.scala 81:12]
      node _out_T_73 = mux(_out_T_33, _out_T_35, _out_T_72) @[ALU.scala 80:12]
      node _out_T_74 = mux(_out_T_28, _out_T_30, _out_T_73) @[ALU.scala 79:12]
      node _out_T_75 = mux(_out_T_23, _out_T_25, _out_T_74) @[ALU.scala 78:12]
      node _out_T_76 = mux(_out_T_16, _out_T_20, _out_T_75) @[ALU.scala 77:12]
      node out = mux(_out_T_10, _out_T_13, _out_T_76) @[ALU.scala 76:12]
      io.out <= out @[ALU.scala 88:12]
      skip @[ALU.scala 74:25]
    else : @[ALU.scala 91:31]
      node _T_1 = eq(io.in_V, UInt<1>("h01")) @[ALU.scala 91:21]
      when _T_1 : @[ALU.scala 91:31]
        node _T_2 = eq(io.alu_Op, UInt<9>("h07")) @[ALU.scala 92:21]
        when _T_2 : @[ALU.scala 92:38]
          node _T_3 = leq(io.in_A, io.in_B) @[ALU.scala 93:22]
          when _T_3 : @[ALU.scala 93:33]
            io.out <= io.in_A @[ALU.scala 94:20]
            skip @[ALU.scala 93:33]
          else : @[ALU.scala 95:38]
            node _T_4 = gt(io.in_A, io.in_B) @[ALU.scala 95:28]
            when _T_4 : @[ALU.scala 95:38]
              io.out <= io.in_B @[ALU.scala 96:20]
              skip @[ALU.scala 95:38]
            else : @[ALU.scala 97:20]
              io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 98:20]
              skip @[ALU.scala 97:20]
          skip @[ALU.scala 92:38]
        else : @[ALU.scala 102:70]
          node _T_5 = eq(io.alu_Op, UInt<9>("h03")) @[ALU.scala 102:27]
          node _T_6 = eq(io.alu_lmul, UInt<1>("h00")) @[ALU.scala 102:56]
          node _T_7 = and(_T_5, _T_6) @[ALU.scala 102:41]
          when _T_7 : @[ALU.scala 102:70]
            node _T_8 = eq(io.alu_sew, UInt<2>("h03")) @[ALU.scala 103:26]
            when _T_8 : @[ALU.scala 103:40]
              node _h_T = bits(io.alu_imm, 63, 0) @[ALU.scala 104:32]
              node h = asSInt(_h_T) @[ALU.scala 104:39]
              node _out64_0_T = bits(io.V_in_B, 63, 0) @[ALU.scala 105:35]
              node _out64_0_T_1 = asUInt(h) @[ALU.scala 105:46]
              node _out64_0_T_2 = add(_out64_0_T, _out64_0_T_1) @[ALU.scala 105:42]
              node _out64_0_T_3 = tail(_out64_0_T_2, 1) @[ALU.scala 105:42]
              node _out64_0_T_4 = asSInt(_out64_0_T_3) @[ALU.scala 105:54]
              out64[0] <= _out64_0_T_4 @[ALU.scala 105:22]
              node _out64_1_T = bits(io.V_in_B, 127, 64) @[ALU.scala 106:35]
              node _out64_1_T_1 = asUInt(h) @[ALU.scala 106:48]
              node _out64_1_T_2 = add(_out64_1_T, _out64_1_T_1) @[ALU.scala 106:44]
              node _out64_1_T_3 = tail(_out64_1_T_2, 1) @[ALU.scala 106:44]
              node _out64_1_T_4 = asSInt(_out64_1_T_3) @[ALU.scala 106:56]
              out64[1] <= _out64_1_T_4 @[ALU.scala 106:22]
              node io_V_out_lo = asUInt(out64[0]) @[Cat.scala 30:58]
              node io_V_out_hi = asUInt(out64[1]) @[Cat.scala 30:58]
              node _io_V_out_T = cat(io_V_out_hi, io_V_out_lo) @[Cat.scala 30:58]
              node _io_V_out_T_1 = asSInt(_io_V_out_T) @[ALU.scala 107:51]
              io.V_out <= _io_V_out_T_1 @[ALU.scala 107:22]
              skip @[ALU.scala 103:40]
            else : @[ALU.scala 108:46]
              node _T_9 = eq(io.alu_sew, UInt<2>("h02")) @[ALU.scala 108:32]
              when _T_9 : @[ALU.scala 108:46]
                node _h_T_1 = bits(io.alu_imm, 31, 0) @[ALU.scala 109:32]
                node h_1 = asSInt(_h_T_1) @[ALU.scala 109:39]
                node _out32_0_T = bits(io.V_in_B, 31, 0) @[ALU.scala 110:35]
                node _out32_0_T_1 = asUInt(h_1) @[ALU.scala 110:46]
                node _out32_0_T_2 = add(_out32_0_T, _out32_0_T_1) @[ALU.scala 110:42]
                node _out32_0_T_3 = tail(_out32_0_T_2, 1) @[ALU.scala 110:42]
                node _out32_0_T_4 = asSInt(_out32_0_T_3) @[ALU.scala 110:54]
                out32[0] <= _out32_0_T_4 @[ALU.scala 110:22]
                node _out32_1_T = bits(io.V_in_B, 63, 32) @[ALU.scala 111:35]
                node _out32_1_T_1 = asUInt(h_1) @[ALU.scala 111:47]
                node _out32_1_T_2 = add(_out32_1_T, _out32_1_T_1) @[ALU.scala 111:43]
                node _out32_1_T_3 = tail(_out32_1_T_2, 1) @[ALU.scala 111:43]
                node _out32_1_T_4 = asSInt(_out32_1_T_3) @[ALU.scala 111:55]
                out32[1] <= _out32_1_T_4 @[ALU.scala 111:22]
                node _out32_2_T = bits(io.V_in_B, 95, 64) @[ALU.scala 112:35]
                node _out32_2_T_1 = asUInt(h_1) @[ALU.scala 112:47]
                node _out32_2_T_2 = add(_out32_2_T, _out32_2_T_1) @[ALU.scala 112:43]
                node _out32_2_T_3 = tail(_out32_2_T_2, 1) @[ALU.scala 112:43]
                node _out32_2_T_4 = asSInt(_out32_2_T_3) @[ALU.scala 112:55]
                out32[2] <= _out32_2_T_4 @[ALU.scala 112:22]
                node _out32_3_T = bits(io.V_in_B, 127, 96) @[ALU.scala 113:35]
                node _out32_3_T_1 = asUInt(h_1) @[ALU.scala 113:48]
                node _out32_3_T_2 = add(_out32_3_T, _out32_3_T_1) @[ALU.scala 113:44]
                node _out32_3_T_3 = tail(_out32_3_T_2, 1) @[ALU.scala 113:44]
                node _out32_3_T_4 = asSInt(_out32_3_T_3) @[ALU.scala 113:56]
                out32[3] <= _out32_3_T_4 @[ALU.scala 113:22]
                node io_V_out_lo_lo = asUInt(out32[0]) @[Cat.scala 30:58]
                node io_V_out_lo_hi = asUInt(out32[1]) @[Cat.scala 30:58]
                node io_V_out_lo_1 = cat(io_V_out_lo_hi, io_V_out_lo_lo) @[Cat.scala 30:58]
                node io_V_out_hi_lo = asUInt(out32[2]) @[Cat.scala 30:58]
                node io_V_out_hi_hi = asUInt(out32[3]) @[Cat.scala 30:58]
                node io_V_out_hi_1 = cat(io_V_out_hi_hi, io_V_out_hi_lo) @[Cat.scala 30:58]
                node _io_V_out_T_2 = cat(io_V_out_hi_1, io_V_out_lo_1) @[Cat.scala 30:58]
                node _io_V_out_T_3 = asSInt(_io_V_out_T_2) @[ALU.scala 114:71]
                io.V_out <= _io_V_out_T_3 @[ALU.scala 114:22]
                skip @[ALU.scala 108:46]
              else : @[ALU.scala 115:46]
                node _T_10 = eq(io.alu_sew, UInt<1>("h01")) @[ALU.scala 115:32]
                when _T_10 : @[ALU.scala 115:46]
                  node _h_T_2 = bits(io.alu_imm, 15, 0) @[ALU.scala 116:32]
                  node h_2 = asSInt(_h_T_2) @[ALU.scala 116:39]
                  node _out16_0_T = bits(io.V_in_B, 15, 0) @[ALU.scala 117:35]
                  node _out16_0_T_1 = asUInt(h_2) @[ALU.scala 117:46]
                  node _out16_0_T_2 = add(_out16_0_T, _out16_0_T_1) @[ALU.scala 117:42]
                  node _out16_0_T_3 = tail(_out16_0_T_2, 1) @[ALU.scala 117:42]
                  node _out16_0_T_4 = asSInt(_out16_0_T_3) @[ALU.scala 117:54]
                  out16[0] <= _out16_0_T_4 @[ALU.scala 117:22]
                  node _out16_1_T = bits(io.V_in_B, 31, 16) @[ALU.scala 118:35]
                  node _out16_1_T_1 = asUInt(h_2) @[ALU.scala 118:47]
                  node _out16_1_T_2 = add(_out16_1_T, _out16_1_T_1) @[ALU.scala 118:43]
                  node _out16_1_T_3 = tail(_out16_1_T_2, 1) @[ALU.scala 118:43]
                  node _out16_1_T_4 = asSInt(_out16_1_T_3) @[ALU.scala 118:55]
                  out16[1] <= _out16_1_T_4 @[ALU.scala 118:22]
                  node _out16_2_T = bits(io.V_in_B, 47, 32) @[ALU.scala 119:35]
                  node _out16_2_T_1 = asUInt(h_2) @[ALU.scala 119:47]
                  node _out16_2_T_2 = add(_out16_2_T, _out16_2_T_1) @[ALU.scala 119:43]
                  node _out16_2_T_3 = tail(_out16_2_T_2, 1) @[ALU.scala 119:43]
                  node _out16_2_T_4 = asSInt(_out16_2_T_3) @[ALU.scala 119:55]
                  out16[2] <= _out16_2_T_4 @[ALU.scala 119:22]
                  node _out16_3_T = bits(io.V_in_B, 63, 48) @[ALU.scala 120:35]
                  node _out16_3_T_1 = asUInt(h_2) @[ALU.scala 120:47]
                  node _out16_3_T_2 = add(_out16_3_T, _out16_3_T_1) @[ALU.scala 120:43]
                  node _out16_3_T_3 = tail(_out16_3_T_2, 1) @[ALU.scala 120:43]
                  node _out16_3_T_4 = asSInt(_out16_3_T_3) @[ALU.scala 120:55]
                  out16[3] <= _out16_3_T_4 @[ALU.scala 120:22]
                  node _out16_4_T = bits(io.V_in_B, 79, 64) @[ALU.scala 121:35]
                  node _out16_4_T_1 = asUInt(h_2) @[ALU.scala 121:47]
                  node _out16_4_T_2 = add(_out16_4_T, _out16_4_T_1) @[ALU.scala 121:43]
                  node _out16_4_T_3 = tail(_out16_4_T_2, 1) @[ALU.scala 121:43]
                  node _out16_4_T_4 = asSInt(_out16_4_T_3) @[ALU.scala 121:55]
                  out16[4] <= _out16_4_T_4 @[ALU.scala 121:22]
                  node _out16_5_T = bits(io.V_in_B, 95, 80) @[ALU.scala 122:35]
                  node _out16_5_T_1 = asUInt(h_2) @[ALU.scala 122:47]
                  node _out16_5_T_2 = add(_out16_5_T, _out16_5_T_1) @[ALU.scala 122:43]
                  node _out16_5_T_3 = tail(_out16_5_T_2, 1) @[ALU.scala 122:43]
                  node _out16_5_T_4 = asSInt(_out16_5_T_3) @[ALU.scala 122:55]
                  out16[5] <= _out16_5_T_4 @[ALU.scala 122:22]
                  node _out16_6_T = bits(io.V_in_B, 111, 96) @[ALU.scala 123:35]
                  node _out16_6_T_1 = asUInt(h_2) @[ALU.scala 123:48]
                  node _out16_6_T_2 = add(_out16_6_T, _out16_6_T_1) @[ALU.scala 123:44]
                  node _out16_6_T_3 = tail(_out16_6_T_2, 1) @[ALU.scala 123:44]
                  node _out16_6_T_4 = asSInt(_out16_6_T_3) @[ALU.scala 123:56]
                  out16[6] <= _out16_6_T_4 @[ALU.scala 123:22]
                  node _out16_7_T = bits(io.V_in_B, 127, 112) @[ALU.scala 124:35]
                  node _out16_7_T_1 = asUInt(h_2) @[ALU.scala 124:49]
                  node _out16_7_T_2 = add(_out16_7_T, _out16_7_T_1) @[ALU.scala 124:45]
                  node _out16_7_T_3 = tail(_out16_7_T_2, 1) @[ALU.scala 124:45]
                  node _out16_7_T_4 = asSInt(_out16_7_T_3) @[ALU.scala 124:57]
                  out16[7] <= _out16_7_T_4 @[ALU.scala 124:22]
                  node io_V_out_lo_lo_lo = asUInt(out16[0]) @[Cat.scala 30:58]
                  node io_V_out_lo_lo_hi = asUInt(out16[1]) @[Cat.scala 30:58]
                  node io_V_out_lo_lo_1 = cat(io_V_out_lo_lo_hi, io_V_out_lo_lo_lo) @[Cat.scala 30:58]
                  node io_V_out_lo_hi_lo = asUInt(out16[2]) @[Cat.scala 30:58]
                  node io_V_out_lo_hi_hi = asUInt(out16[3]) @[Cat.scala 30:58]
                  node io_V_out_lo_hi_1 = cat(io_V_out_lo_hi_hi, io_V_out_lo_hi_lo) @[Cat.scala 30:58]
                  node io_V_out_lo_2 = cat(io_V_out_lo_hi_1, io_V_out_lo_lo_1) @[Cat.scala 30:58]
                  node io_V_out_hi_lo_lo = asUInt(out16[4]) @[Cat.scala 30:58]
                  node io_V_out_hi_lo_hi = asUInt(out16[5]) @[Cat.scala 30:58]
                  node io_V_out_hi_lo_1 = cat(io_V_out_hi_lo_hi, io_V_out_hi_lo_lo) @[Cat.scala 30:58]
                  node io_V_out_hi_hi_lo = asUInt(out16[6]) @[Cat.scala 30:58]
                  node io_V_out_hi_hi_hi = asUInt(out16[7]) @[Cat.scala 30:58]
                  node io_V_out_hi_hi_1 = cat(io_V_out_hi_hi_hi, io_V_out_hi_hi_lo) @[Cat.scala 30:58]
                  node io_V_out_hi_2 = cat(io_V_out_hi_hi_1, io_V_out_hi_lo_1) @[Cat.scala 30:58]
                  node _io_V_out_T_4 = cat(io_V_out_hi_2, io_V_out_lo_2) @[Cat.scala 30:58]
                  node _io_V_out_T_5 = asSInt(_io_V_out_T_4) @[ALU.scala 125:111]
                  io.V_out <= _io_V_out_T_5 @[ALU.scala 125:22]
                  skip @[ALU.scala 115:46]
                else : @[ALU.scala 126:46]
                  node _T_11 = eq(io.alu_sew, UInt<1>("h00")) @[ALU.scala 126:32]
                  when _T_11 : @[ALU.scala 126:46]
                    node _h_T_3 = bits(io.alu_imm, 7, 0) @[ALU.scala 127:32]
                    node h_3 = asSInt(_h_T_3) @[ALU.scala 127:38]
                    node _out8_0_T = bits(io.V_in_B, 7, 0) @[ALU.scala 128:34]
                    node _out8_0_T_1 = asUInt(h_3) @[ALU.scala 128:44]
                    node _out8_0_T_2 = add(_out8_0_T, _out8_0_T_1) @[ALU.scala 128:40]
                    node _out8_0_T_3 = tail(_out8_0_T_2, 1) @[ALU.scala 128:40]
                    node _out8_0_T_4 = asSInt(_out8_0_T_3) @[ALU.scala 128:52]
                    out8[0] <= _out8_0_T_4 @[ALU.scala 128:21]
                    node _out8_1_T = bits(io.V_in_B, 15, 8) @[ALU.scala 129:34]
                    node _out8_1_T_1 = asUInt(h_3) @[ALU.scala 129:45]
                    node _out8_1_T_2 = add(_out8_1_T, _out8_1_T_1) @[ALU.scala 129:41]
                    node _out8_1_T_3 = tail(_out8_1_T_2, 1) @[ALU.scala 129:41]
                    node _out8_1_T_4 = asSInt(_out8_1_T_3) @[ALU.scala 129:53]
                    out8[1] <= _out8_1_T_4 @[ALU.scala 129:21]
                    node _out8_2_T = bits(io.V_in_B, 23, 16) @[ALU.scala 130:34]
                    node _out8_2_T_1 = asUInt(h_3) @[ALU.scala 130:46]
                    node _out8_2_T_2 = add(_out8_2_T, _out8_2_T_1) @[ALU.scala 130:42]
                    node _out8_2_T_3 = tail(_out8_2_T_2, 1) @[ALU.scala 130:42]
                    node _out8_2_T_4 = asSInt(_out8_2_T_3) @[ALU.scala 130:54]
                    out8[2] <= _out8_2_T_4 @[ALU.scala 130:21]
                    node _out8_3_T = bits(io.V_in_B, 31, 24) @[ALU.scala 131:34]
                    node _out8_3_T_1 = asUInt(h_3) @[ALU.scala 131:46]
                    node _out8_3_T_2 = add(_out8_3_T, _out8_3_T_1) @[ALU.scala 131:42]
                    node _out8_3_T_3 = tail(_out8_3_T_2, 1) @[ALU.scala 131:42]
                    node _out8_3_T_4 = asSInt(_out8_3_T_3) @[ALU.scala 131:54]
                    out8[3] <= _out8_3_T_4 @[ALU.scala 131:21]
                    node _out8_4_T = bits(io.V_in_B, 39, 32) @[ALU.scala 132:34]
                    node _out8_4_T_1 = asUInt(h_3) @[ALU.scala 132:46]
                    node _out8_4_T_2 = add(_out8_4_T, _out8_4_T_1) @[ALU.scala 132:42]
                    node _out8_4_T_3 = tail(_out8_4_T_2, 1) @[ALU.scala 132:42]
                    node _out8_4_T_4 = asSInt(_out8_4_T_3) @[ALU.scala 132:54]
                    out8[4] <= _out8_4_T_4 @[ALU.scala 132:21]
                    node _out8_5_T = bits(io.V_in_B, 47, 40) @[ALU.scala 133:34]
                    node _out8_5_T_1 = asUInt(h_3) @[ALU.scala 133:46]
                    node _out8_5_T_2 = add(_out8_5_T, _out8_5_T_1) @[ALU.scala 133:42]
                    node _out8_5_T_3 = tail(_out8_5_T_2, 1) @[ALU.scala 133:42]
                    node _out8_5_T_4 = asSInt(_out8_5_T_3) @[ALU.scala 133:54]
                    out8[5] <= _out8_5_T_4 @[ALU.scala 133:21]
                    node _out8_6_T = bits(io.V_in_B, 55, 48) @[ALU.scala 134:34]
                    node _out8_6_T_1 = asUInt(h_3) @[ALU.scala 134:46]
                    node _out8_6_T_2 = add(_out8_6_T, _out8_6_T_1) @[ALU.scala 134:42]
                    node _out8_6_T_3 = tail(_out8_6_T_2, 1) @[ALU.scala 134:42]
                    node _out8_6_T_4 = asSInt(_out8_6_T_3) @[ALU.scala 134:54]
                    out8[6] <= _out8_6_T_4 @[ALU.scala 134:21]
                    node _out8_7_T = bits(io.V_in_B, 63, 56) @[ALU.scala 135:34]
                    node _out8_7_T_1 = asUInt(h_3) @[ALU.scala 135:46]
                    node _out8_7_T_2 = add(_out8_7_T, _out8_7_T_1) @[ALU.scala 135:42]
                    node _out8_7_T_3 = tail(_out8_7_T_2, 1) @[ALU.scala 135:42]
                    node _out8_7_T_4 = asSInt(_out8_7_T_3) @[ALU.scala 135:54]
                    out8[7] <= _out8_7_T_4 @[ALU.scala 135:21]
                    node _out8_8_T = bits(io.V_in_B, 71, 64) @[ALU.scala 136:34]
                    node _out8_8_T_1 = asUInt(h_3) @[ALU.scala 136:46]
                    node _out8_8_T_2 = add(_out8_8_T, _out8_8_T_1) @[ALU.scala 136:42]
                    node _out8_8_T_3 = tail(_out8_8_T_2, 1) @[ALU.scala 136:42]
                    node _out8_8_T_4 = asSInt(_out8_8_T_3) @[ALU.scala 136:54]
                    out8[8] <= _out8_8_T_4 @[ALU.scala 136:21]
                    node _out8_9_T = bits(io.V_in_B, 79, 72) @[ALU.scala 137:34]
                    node _out8_9_T_1 = asUInt(h_3) @[ALU.scala 137:46]
                    node _out8_9_T_2 = add(_out8_9_T, _out8_9_T_1) @[ALU.scala 137:42]
                    node _out8_9_T_3 = tail(_out8_9_T_2, 1) @[ALU.scala 137:42]
                    node _out8_9_T_4 = asSInt(_out8_9_T_3) @[ALU.scala 137:54]
                    out8[9] <= _out8_9_T_4 @[ALU.scala 137:21]
                    node _out8_10_T = bits(io.V_in_B, 87, 80) @[ALU.scala 138:35]
                    node _out8_10_T_1 = asUInt(h_3) @[ALU.scala 138:47]
                    node _out8_10_T_2 = add(_out8_10_T, _out8_10_T_1) @[ALU.scala 138:43]
                    node _out8_10_T_3 = tail(_out8_10_T_2, 1) @[ALU.scala 138:43]
                    node _out8_10_T_4 = asSInt(_out8_10_T_3) @[ALU.scala 138:55]
                    out8[10] <= _out8_10_T_4 @[ALU.scala 138:22]
                    node _out8_11_T = bits(io.V_in_B, 95, 88) @[ALU.scala 139:35]
                    node _out8_11_T_1 = asUInt(h_3) @[ALU.scala 139:47]
                    node _out8_11_T_2 = add(_out8_11_T, _out8_11_T_1) @[ALU.scala 139:43]
                    node _out8_11_T_3 = tail(_out8_11_T_2, 1) @[ALU.scala 139:43]
                    node _out8_11_T_4 = asSInt(_out8_11_T_3) @[ALU.scala 139:55]
                    out8[11] <= _out8_11_T_4 @[ALU.scala 139:22]
                    node _out8_12_T = bits(io.V_in_B, 103, 96) @[ALU.scala 140:35]
                    node _out8_12_T_1 = asUInt(h_3) @[ALU.scala 140:48]
                    node _out8_12_T_2 = add(_out8_12_T, _out8_12_T_1) @[ALU.scala 140:44]
                    node _out8_12_T_3 = tail(_out8_12_T_2, 1) @[ALU.scala 140:44]
                    node _out8_12_T_4 = asSInt(_out8_12_T_3) @[ALU.scala 140:56]
                    out8[12] <= _out8_12_T_4 @[ALU.scala 140:22]
                    node _out8_13_T = bits(io.V_in_B, 111, 104) @[ALU.scala 141:35]
                    node _out8_13_T_1 = asUInt(h_3) @[ALU.scala 141:49]
                    node _out8_13_T_2 = add(_out8_13_T, _out8_13_T_1) @[ALU.scala 141:45]
                    node _out8_13_T_3 = tail(_out8_13_T_2, 1) @[ALU.scala 141:45]
                    node _out8_13_T_4 = asSInt(_out8_13_T_3) @[ALU.scala 141:57]
                    out8[13] <= _out8_13_T_4 @[ALU.scala 141:22]
                    node _out8_14_T = bits(io.V_in_B, 119, 112) @[ALU.scala 142:35]
                    node _out8_14_T_1 = asUInt(h_3) @[ALU.scala 142:49]
                    node _out8_14_T_2 = add(_out8_14_T, _out8_14_T_1) @[ALU.scala 142:45]
                    node _out8_14_T_3 = tail(_out8_14_T_2, 1) @[ALU.scala 142:45]
                    node _out8_14_T_4 = asSInt(_out8_14_T_3) @[ALU.scala 142:57]
                    out8[14] <= _out8_14_T_4 @[ALU.scala 142:22]
                    node _out8_15_T = bits(io.V_in_B, 127, 120) @[ALU.scala 143:35]
                    node _out8_15_T_1 = asUInt(h_3) @[ALU.scala 143:49]
                    node _out8_15_T_2 = add(_out8_15_T, _out8_15_T_1) @[ALU.scala 143:45]
                    node _out8_15_T_3 = tail(_out8_15_T_2, 1) @[ALU.scala 143:45]
                    node _out8_15_T_4 = asSInt(_out8_15_T_3) @[ALU.scala 143:57]
                    out8[15] <= _out8_15_T_4 @[ALU.scala 143:22]
                    node io_V_out_lo_lo_lo_lo = asUInt(out8[0]) @[Cat.scala 30:58]
                    node io_V_out_lo_lo_lo_hi = asUInt(out8[1]) @[Cat.scala 30:58]
                    node io_V_out_lo_lo_lo_1 = cat(io_V_out_lo_lo_lo_hi, io_V_out_lo_lo_lo_lo) @[Cat.scala 30:58]
                    node io_V_out_lo_lo_hi_lo = asUInt(out8[2]) @[Cat.scala 30:58]
                    node io_V_out_lo_lo_hi_hi = asUInt(out8[3]) @[Cat.scala 30:58]
                    node io_V_out_lo_lo_hi_1 = cat(io_V_out_lo_lo_hi_hi, io_V_out_lo_lo_hi_lo) @[Cat.scala 30:58]
                    node io_V_out_lo_lo_2 = cat(io_V_out_lo_lo_hi_1, io_V_out_lo_lo_lo_1) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_lo_lo = asUInt(out8[4]) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_lo_hi = asUInt(out8[5]) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_lo_1 = cat(io_V_out_lo_hi_lo_hi, io_V_out_lo_hi_lo_lo) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_hi_lo = asUInt(out8[6]) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_hi_hi = asUInt(out8[7]) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_hi_1 = cat(io_V_out_lo_hi_hi_hi, io_V_out_lo_hi_hi_lo) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_2 = cat(io_V_out_lo_hi_hi_1, io_V_out_lo_hi_lo_1) @[Cat.scala 30:58]
                    node io_V_out_lo_3 = cat(io_V_out_lo_hi_2, io_V_out_lo_lo_2) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_lo_lo = asUInt(out8[8]) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_lo_hi = asUInt(out8[9]) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_lo_1 = cat(io_V_out_hi_lo_lo_hi, io_V_out_hi_lo_lo_lo) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_hi_lo = asUInt(out8[10]) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_hi_hi = asUInt(out8[11]) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_hi_1 = cat(io_V_out_hi_lo_hi_hi, io_V_out_hi_lo_hi_lo) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_2 = cat(io_V_out_hi_lo_hi_1, io_V_out_hi_lo_lo_1) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_lo_lo = asUInt(out8[12]) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_lo_hi = asUInt(out8[13]) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_lo_1 = cat(io_V_out_hi_hi_lo_hi, io_V_out_hi_hi_lo_lo) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_hi_lo = asUInt(out8[14]) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_hi_hi = asUInt(out8[15]) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_hi_1 = cat(io_V_out_hi_hi_hi_hi, io_V_out_hi_hi_hi_lo) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_2 = cat(io_V_out_hi_hi_hi_1, io_V_out_hi_hi_lo_1) @[Cat.scala 30:58]
                    node io_V_out_hi_3 = cat(io_V_out_hi_hi_2, io_V_out_hi_lo_2) @[Cat.scala 30:58]
                    node _io_V_out_T_6 = cat(io_V_out_hi_3, io_V_out_lo_3) @[Cat.scala 30:58]
                    node _io_V_out_T_7 = asSInt(_io_V_out_T_6) @[ALU.scala 144:181]
                    io.V_out <= _io_V_out_T_7 @[ALU.scala 144:22]
                    skip @[ALU.scala 126:46]
                  else : @[ALU.scala 145:21]
                    io.V_out <= asSInt(UInt<1>("h00")) @[ALU.scala 146:22]
                    skip @[ALU.scala 145:21]
            skip @[ALU.scala 102:70]
          else : @[ALU.scala 150:70]
            node _T_12 = eq(io.alu_Op, UInt<9>("h00")) @[ALU.scala 150:27]
            node _T_13 = eq(io.alu_lmul, UInt<1>("h00")) @[ALU.scala 150:56]
            node _T_14 = and(_T_12, _T_13) @[ALU.scala 150:41]
            when _T_14 : @[ALU.scala 150:70]
              node _T_15 = eq(io.alu_sew, UInt<2>("h03")) @[ALU.scala 151:26]
              when _T_15 : @[ALU.scala 151:40]
                node _out64_0_T_5 = bits(io.V_in_A, 63, 0) @[ALU.scala 152:35]
                node _out64_0_T_6 = bits(io.V_in_B, 63, 0) @[ALU.scala 152:53]
                node _out64_0_T_7 = add(_out64_0_T_5, _out64_0_T_6) @[ALU.scala 152:42]
                node _out64_0_T_8 = tail(_out64_0_T_7, 1) @[ALU.scala 152:42]
                node _out64_0_T_9 = asSInt(_out64_0_T_8) @[ALU.scala 152:61]
                out64[0] <= _out64_0_T_9 @[ALU.scala 152:22]
                node _out64_1_T_5 = bits(io.V_in_A, 127, 64) @[ALU.scala 153:35]
                node _out64_1_T_6 = bits(io.V_in_B, 127, 64) @[ALU.scala 153:55]
                node _out64_1_T_7 = add(_out64_1_T_5, _out64_1_T_6) @[ALU.scala 153:44]
                node _out64_1_T_8 = tail(_out64_1_T_7, 1) @[ALU.scala 153:44]
                node _out64_1_T_9 = asSInt(_out64_1_T_8) @[ALU.scala 153:65]
                out64[1] <= _out64_1_T_9 @[ALU.scala 153:22]
                node io_V_out_lo_4 = asUInt(out64[0]) @[Cat.scala 30:58]
                node io_V_out_hi_4 = asUInt(out64[1]) @[Cat.scala 30:58]
                node _io_V_out_T_8 = cat(io_V_out_hi_4, io_V_out_lo_4) @[Cat.scala 30:58]
                node _io_V_out_T_9 = asSInt(_io_V_out_T_8) @[ALU.scala 154:51]
                io.V_out <= _io_V_out_T_9 @[ALU.scala 154:22]
                skip @[ALU.scala 151:40]
              else : @[ALU.scala 155:46]
                node _T_16 = eq(io.alu_sew, UInt<2>("h02")) @[ALU.scala 155:32]
                when _T_16 : @[ALU.scala 155:46]
                  node _out32_0_T_5 = bits(io.V_in_A, 31, 0) @[ALU.scala 156:35]
                  node _out32_0_T_6 = bits(io.V_in_B, 31, 0) @[ALU.scala 156:53]
                  node _out32_0_T_7 = add(_out32_0_T_5, _out32_0_T_6) @[ALU.scala 156:42]
                  node _out32_0_T_8 = tail(_out32_0_T_7, 1) @[ALU.scala 156:42]
                  node _out32_0_T_9 = asSInt(_out32_0_T_8) @[ALU.scala 156:61]
                  out32[0] <= _out32_0_T_9 @[ALU.scala 156:22]
                  node _out32_1_T_5 = bits(io.V_in_A, 63, 32) @[ALU.scala 157:35]
                  node _out32_1_T_6 = bits(io.V_in_B, 63, 32) @[ALU.scala 157:54]
                  node _out32_1_T_7 = add(_out32_1_T_5, _out32_1_T_6) @[ALU.scala 157:43]
                  node _out32_1_T_8 = tail(_out32_1_T_7, 1) @[ALU.scala 157:43]
                  node _out32_1_T_9 = asSInt(_out32_1_T_8) @[ALU.scala 157:63]
                  out32[1] <= _out32_1_T_9 @[ALU.scala 157:22]
                  node _out32_2_T_5 = bits(io.V_in_A, 95, 64) @[ALU.scala 158:35]
                  node _out32_2_T_6 = bits(io.V_in_B, 95, 64) @[ALU.scala 158:54]
                  node _out32_2_T_7 = add(_out32_2_T_5, _out32_2_T_6) @[ALU.scala 158:43]
                  node _out32_2_T_8 = tail(_out32_2_T_7, 1) @[ALU.scala 158:43]
                  node _out32_2_T_9 = asSInt(_out32_2_T_8) @[ALU.scala 158:63]
                  out32[2] <= _out32_2_T_9 @[ALU.scala 158:22]
                  node _out32_3_T_5 = bits(io.V_in_A, 127, 96) @[ALU.scala 159:35]
                  node _out32_3_T_6 = bits(io.V_in_B, 127, 96) @[ALU.scala 159:55]
                  node _out32_3_T_7 = add(_out32_3_T_5, _out32_3_T_6) @[ALU.scala 159:44]
                  node _out32_3_T_8 = tail(_out32_3_T_7, 1) @[ALU.scala 159:44]
                  node _out32_3_T_9 = asSInt(_out32_3_T_8) @[ALU.scala 159:65]
                  out32[3] <= _out32_3_T_9 @[ALU.scala 159:22]
                  node io_V_out_lo_lo_3 = asUInt(out32[0]) @[Cat.scala 30:58]
                  node io_V_out_lo_hi_3 = asUInt(out32[1]) @[Cat.scala 30:58]
                  node io_V_out_lo_5 = cat(io_V_out_lo_hi_3, io_V_out_lo_lo_3) @[Cat.scala 30:58]
                  node io_V_out_hi_lo_3 = asUInt(out32[2]) @[Cat.scala 30:58]
                  node io_V_out_hi_hi_3 = asUInt(out32[3]) @[Cat.scala 30:58]
                  node io_V_out_hi_5 = cat(io_V_out_hi_hi_3, io_V_out_hi_lo_3) @[Cat.scala 30:58]
                  node _io_V_out_T_10 = cat(io_V_out_hi_5, io_V_out_lo_5) @[Cat.scala 30:58]
                  node _io_V_out_T_11 = asSInt(_io_V_out_T_10) @[ALU.scala 160:71]
                  io.V_out <= _io_V_out_T_11 @[ALU.scala 160:22]
                  skip @[ALU.scala 155:46]
                else : @[ALU.scala 161:46]
                  node _T_17 = eq(io.alu_sew, UInt<1>("h01")) @[ALU.scala 161:32]
                  when _T_17 : @[ALU.scala 161:46]
                    node _out16_0_T_5 = bits(io.V_in_A, 15, 0) @[ALU.scala 162:35]
                    node _out16_0_T_6 = bits(io.V_in_B, 15, 0) @[ALU.scala 162:53]
                    node _out16_0_T_7 = add(_out16_0_T_5, _out16_0_T_6) @[ALU.scala 162:42]
                    node _out16_0_T_8 = tail(_out16_0_T_7, 1) @[ALU.scala 162:42]
                    node _out16_0_T_9 = asSInt(_out16_0_T_8) @[ALU.scala 162:61]
                    out16[0] <= _out16_0_T_9 @[ALU.scala 162:22]
                    node _out16_1_T_5 = bits(io.V_in_A, 31, 16) @[ALU.scala 163:35]
                    node _out16_1_T_6 = bits(io.V_in_B, 31, 16) @[ALU.scala 163:54]
                    node _out16_1_T_7 = add(_out16_1_T_5, _out16_1_T_6) @[ALU.scala 163:43]
                    node _out16_1_T_8 = tail(_out16_1_T_7, 1) @[ALU.scala 163:43]
                    node _out16_1_T_9 = asSInt(_out16_1_T_8) @[ALU.scala 163:63]
                    out16[1] <= _out16_1_T_9 @[ALU.scala 163:22]
                    node _out16_2_T_5 = bits(io.V_in_A, 47, 32) @[ALU.scala 164:35]
                    node _out16_2_T_6 = bits(io.V_in_B, 47, 32) @[ALU.scala 164:54]
                    node _out16_2_T_7 = add(_out16_2_T_5, _out16_2_T_6) @[ALU.scala 164:43]
                    node _out16_2_T_8 = tail(_out16_2_T_7, 1) @[ALU.scala 164:43]
                    node _out16_2_T_9 = asSInt(_out16_2_T_8) @[ALU.scala 164:63]
                    out16[2] <= _out16_2_T_9 @[ALU.scala 164:22]
                    node _out16_3_T_5 = bits(io.V_in_A, 63, 48) @[ALU.scala 165:35]
                    node _out16_3_T_6 = bits(io.V_in_B, 63, 48) @[ALU.scala 165:54]
                    node _out16_3_T_7 = add(_out16_3_T_5, _out16_3_T_6) @[ALU.scala 165:43]
                    node _out16_3_T_8 = tail(_out16_3_T_7, 1) @[ALU.scala 165:43]
                    node _out16_3_T_9 = asSInt(_out16_3_T_8) @[ALU.scala 165:63]
                    out16[3] <= _out16_3_T_9 @[ALU.scala 165:22]
                    node _out16_4_T_5 = bits(io.V_in_A, 79, 64) @[ALU.scala 166:35]
                    node _out16_4_T_6 = bits(io.V_in_B, 79, 64) @[ALU.scala 166:54]
                    node _out16_4_T_7 = add(_out16_4_T_5, _out16_4_T_6) @[ALU.scala 166:43]
                    node _out16_4_T_8 = tail(_out16_4_T_7, 1) @[ALU.scala 166:43]
                    node _out16_4_T_9 = asSInt(_out16_4_T_8) @[ALU.scala 166:63]
                    out16[4] <= _out16_4_T_9 @[ALU.scala 166:22]
                    node _out16_5_T_5 = bits(io.V_in_A, 95, 80) @[ALU.scala 167:35]
                    node _out16_5_T_6 = bits(io.V_in_B, 95, 80) @[ALU.scala 167:54]
                    node _out16_5_T_7 = add(_out16_5_T_5, _out16_5_T_6) @[ALU.scala 167:43]
                    node _out16_5_T_8 = tail(_out16_5_T_7, 1) @[ALU.scala 167:43]
                    node _out16_5_T_9 = asSInt(_out16_5_T_8) @[ALU.scala 167:63]
                    out16[5] <= _out16_5_T_9 @[ALU.scala 167:22]
                    node _out16_6_T_5 = bits(io.V_in_A, 111, 96) @[ALU.scala 168:35]
                    node _out16_6_T_6 = bits(io.V_in_B, 111, 96) @[ALU.scala 168:55]
                    node _out16_6_T_7 = add(_out16_6_T_5, _out16_6_T_6) @[ALU.scala 168:44]
                    node _out16_6_T_8 = tail(_out16_6_T_7, 1) @[ALU.scala 168:44]
                    node _out16_6_T_9 = asSInt(_out16_6_T_8) @[ALU.scala 168:65]
                    out16[6] <= _out16_6_T_9 @[ALU.scala 168:22]
                    node _out16_7_T_5 = bits(io.V_in_A, 127, 112) @[ALU.scala 169:35]
                    node _out16_7_T_6 = bits(io.V_in_B, 127, 112) @[ALU.scala 169:56]
                    node _out16_7_T_7 = add(_out16_7_T_5, _out16_7_T_6) @[ALU.scala 169:45]
                    node _out16_7_T_8 = tail(_out16_7_T_7, 1) @[ALU.scala 169:45]
                    node _out16_7_T_9 = asSInt(_out16_7_T_8) @[ALU.scala 169:67]
                    out16[7] <= _out16_7_T_9 @[ALU.scala 169:22]
                    node io_V_out_lo_lo_lo_2 = asUInt(out16[0]) @[Cat.scala 30:58]
                    node io_V_out_lo_lo_hi_2 = asUInt(out16[1]) @[Cat.scala 30:58]
                    node io_V_out_lo_lo_4 = cat(io_V_out_lo_lo_hi_2, io_V_out_lo_lo_lo_2) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_lo_2 = asUInt(out16[2]) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_hi_2 = asUInt(out16[3]) @[Cat.scala 30:58]
                    node io_V_out_lo_hi_4 = cat(io_V_out_lo_hi_hi_2, io_V_out_lo_hi_lo_2) @[Cat.scala 30:58]
                    node io_V_out_lo_6 = cat(io_V_out_lo_hi_4, io_V_out_lo_lo_4) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_lo_2 = asUInt(out16[4]) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_hi_2 = asUInt(out16[5]) @[Cat.scala 30:58]
                    node io_V_out_hi_lo_4 = cat(io_V_out_hi_lo_hi_2, io_V_out_hi_lo_lo_2) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_lo_2 = asUInt(out16[6]) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_hi_2 = asUInt(out16[7]) @[Cat.scala 30:58]
                    node io_V_out_hi_hi_4 = cat(io_V_out_hi_hi_hi_2, io_V_out_hi_hi_lo_2) @[Cat.scala 30:58]
                    node io_V_out_hi_6 = cat(io_V_out_hi_hi_4, io_V_out_hi_lo_4) @[Cat.scala 30:58]
                    node _io_V_out_T_12 = cat(io_V_out_hi_6, io_V_out_lo_6) @[Cat.scala 30:58]
                    node _io_V_out_T_13 = asSInt(_io_V_out_T_12) @[ALU.scala 170:111]
                    io.V_out <= _io_V_out_T_13 @[ALU.scala 170:22]
                    skip @[ALU.scala 161:46]
                  else : @[ALU.scala 171:46]
                    node _T_18 = eq(io.alu_sew, UInt<1>("h00")) @[ALU.scala 171:32]
                    when _T_18 : @[ALU.scala 171:46]
                      node _out8_0_T_5 = bits(io.V_in_A, 7, 0) @[ALU.scala 172:34]
                      node _out8_0_T_6 = bits(io.V_in_B, 7, 0) @[ALU.scala 172:51]
                      node _out8_0_T_7 = add(_out8_0_T_5, _out8_0_T_6) @[ALU.scala 172:40]
                      node _out8_0_T_8 = tail(_out8_0_T_7, 1) @[ALU.scala 172:40]
                      node _out8_0_T_9 = asSInt(_out8_0_T_8) @[ALU.scala 172:58]
                      out8[0] <= _out8_0_T_9 @[ALU.scala 172:21]
                      node _out8_1_T_5 = bits(io.V_in_A, 15, 8) @[ALU.scala 173:34]
                      node _out8_1_T_6 = bits(io.V_in_B, 15, 8) @[ALU.scala 173:52]
                      node _out8_1_T_7 = add(_out8_1_T_5, _out8_1_T_6) @[ALU.scala 173:41]
                      node _out8_1_T_8 = tail(_out8_1_T_7, 1) @[ALU.scala 173:41]
                      node _out8_1_T_9 = asSInt(_out8_1_T_8) @[ALU.scala 173:60]
                      out8[1] <= _out8_1_T_9 @[ALU.scala 173:21]
                      node _out8_2_T_5 = bits(io.V_in_A, 23, 16) @[ALU.scala 174:34]
                      node _out8_2_T_6 = bits(io.V_in_B, 23, 16) @[ALU.scala 174:53]
                      node _out8_2_T_7 = add(_out8_2_T_5, _out8_2_T_6) @[ALU.scala 174:42]
                      node _out8_2_T_8 = tail(_out8_2_T_7, 1) @[ALU.scala 174:42]
                      node _out8_2_T_9 = asSInt(_out8_2_T_8) @[ALU.scala 174:62]
                      out8[2] <= _out8_2_T_9 @[ALU.scala 174:21]
                      node _out8_3_T_5 = bits(io.V_in_A, 31, 24) @[ALU.scala 175:34]
                      node _out8_3_T_6 = bits(io.V_in_B, 31, 24) @[ALU.scala 175:53]
                      node _out8_3_T_7 = add(_out8_3_T_5, _out8_3_T_6) @[ALU.scala 175:42]
                      node _out8_3_T_8 = tail(_out8_3_T_7, 1) @[ALU.scala 175:42]
                      node _out8_3_T_9 = asSInt(_out8_3_T_8) @[ALU.scala 175:62]
                      out8[3] <= _out8_3_T_9 @[ALU.scala 175:21]
                      node _out8_4_T_5 = bits(io.V_in_A, 39, 32) @[ALU.scala 176:34]
                      node _out8_4_T_6 = bits(io.V_in_B, 39, 32) @[ALU.scala 176:53]
                      node _out8_4_T_7 = add(_out8_4_T_5, _out8_4_T_6) @[ALU.scala 176:42]
                      node _out8_4_T_8 = tail(_out8_4_T_7, 1) @[ALU.scala 176:42]
                      node _out8_4_T_9 = asSInt(_out8_4_T_8) @[ALU.scala 176:62]
                      out8[4] <= _out8_4_T_9 @[ALU.scala 176:21]
                      node _out8_5_T_5 = bits(io.V_in_A, 47, 40) @[ALU.scala 177:34]
                      node _out8_5_T_6 = bits(io.V_in_B, 47, 40) @[ALU.scala 177:53]
                      node _out8_5_T_7 = add(_out8_5_T_5, _out8_5_T_6) @[ALU.scala 177:42]
                      node _out8_5_T_8 = tail(_out8_5_T_7, 1) @[ALU.scala 177:42]
                      node _out8_5_T_9 = asSInt(_out8_5_T_8) @[ALU.scala 177:62]
                      out8[5] <= _out8_5_T_9 @[ALU.scala 177:21]
                      node _out8_6_T_5 = bits(io.V_in_A, 55, 48) @[ALU.scala 178:34]
                      node _out8_6_T_6 = bits(io.V_in_B, 55, 48) @[ALU.scala 178:53]
                      node _out8_6_T_7 = add(_out8_6_T_5, _out8_6_T_6) @[ALU.scala 178:42]
                      node _out8_6_T_8 = tail(_out8_6_T_7, 1) @[ALU.scala 178:42]
                      node _out8_6_T_9 = asSInt(_out8_6_T_8) @[ALU.scala 178:62]
                      out8[6] <= _out8_6_T_9 @[ALU.scala 178:21]
                      node _out8_7_T_5 = bits(io.V_in_A, 63, 56) @[ALU.scala 179:34]
                      node _out8_7_T_6 = bits(io.V_in_B, 63, 56) @[ALU.scala 179:53]
                      node _out8_7_T_7 = add(_out8_7_T_5, _out8_7_T_6) @[ALU.scala 179:42]
                      node _out8_7_T_8 = tail(_out8_7_T_7, 1) @[ALU.scala 179:42]
                      node _out8_7_T_9 = asSInt(_out8_7_T_8) @[ALU.scala 179:62]
                      out8[7] <= _out8_7_T_9 @[ALU.scala 179:21]
                      node _out8_8_T_5 = bits(io.V_in_A, 71, 64) @[ALU.scala 180:34]
                      node _out8_8_T_6 = bits(io.V_in_B, 71, 64) @[ALU.scala 180:53]
                      node _out8_8_T_7 = add(_out8_8_T_5, _out8_8_T_6) @[ALU.scala 180:42]
                      node _out8_8_T_8 = tail(_out8_8_T_7, 1) @[ALU.scala 180:42]
                      node _out8_8_T_9 = asSInt(_out8_8_T_8) @[ALU.scala 180:62]
                      out8[8] <= _out8_8_T_9 @[ALU.scala 180:21]
                      node _out8_9_T_5 = bits(io.V_in_A, 79, 72) @[ALU.scala 181:34]
                      node _out8_9_T_6 = bits(io.V_in_B, 79, 72) @[ALU.scala 181:53]
                      node _out8_9_T_7 = add(_out8_9_T_5, _out8_9_T_6) @[ALU.scala 181:42]
                      node _out8_9_T_8 = tail(_out8_9_T_7, 1) @[ALU.scala 181:42]
                      node _out8_9_T_9 = asSInt(_out8_9_T_8) @[ALU.scala 181:62]
                      out8[9] <= _out8_9_T_9 @[ALU.scala 181:21]
                      node _out8_10_T_5 = bits(io.V_in_A, 87, 80) @[ALU.scala 182:35]
                      node _out8_10_T_6 = bits(io.V_in_B, 87, 80) @[ALU.scala 182:54]
                      node _out8_10_T_7 = add(_out8_10_T_5, _out8_10_T_6) @[ALU.scala 182:43]
                      node _out8_10_T_8 = tail(_out8_10_T_7, 1) @[ALU.scala 182:43]
                      node _out8_10_T_9 = asSInt(_out8_10_T_8) @[ALU.scala 182:63]
                      out8[10] <= _out8_10_T_9 @[ALU.scala 182:22]
                      node _out8_11_T_5 = bits(io.V_in_A, 95, 88) @[ALU.scala 183:35]
                      node _out8_11_T_6 = bits(io.V_in_B, 95, 88) @[ALU.scala 183:54]
                      node _out8_11_T_7 = add(_out8_11_T_5, _out8_11_T_6) @[ALU.scala 183:43]
                      node _out8_11_T_8 = tail(_out8_11_T_7, 1) @[ALU.scala 183:43]
                      node _out8_11_T_9 = asSInt(_out8_11_T_8) @[ALU.scala 183:63]
                      out8[11] <= _out8_11_T_9 @[ALU.scala 183:22]
                      node _out8_12_T_5 = bits(io.V_in_A, 103, 96) @[ALU.scala 184:35]
                      node _out8_12_T_6 = bits(io.V_in_B, 103, 96) @[ALU.scala 184:55]
                      node _out8_12_T_7 = add(_out8_12_T_5, _out8_12_T_6) @[ALU.scala 184:44]
                      node _out8_12_T_8 = tail(_out8_12_T_7, 1) @[ALU.scala 184:44]
                      node _out8_12_T_9 = asSInt(_out8_12_T_8) @[ALU.scala 184:65]
                      out8[12] <= _out8_12_T_9 @[ALU.scala 184:22]
                      node _out8_13_T_5 = bits(io.V_in_A, 111, 104) @[ALU.scala 185:35]
                      node _out8_13_T_6 = bits(io.V_in_B, 111, 104) @[ALU.scala 185:56]
                      node _out8_13_T_7 = add(_out8_13_T_5, _out8_13_T_6) @[ALU.scala 185:45]
                      node _out8_13_T_8 = tail(_out8_13_T_7, 1) @[ALU.scala 185:45]
                      node _out8_13_T_9 = asSInt(_out8_13_T_8) @[ALU.scala 185:67]
                      out8[13] <= _out8_13_T_9 @[ALU.scala 185:22]
                      node _out8_14_T_5 = bits(io.V_in_A, 119, 112) @[ALU.scala 186:35]
                      node _out8_14_T_6 = bits(io.V_in_B, 119, 112) @[ALU.scala 186:56]
                      node _out8_14_T_7 = add(_out8_14_T_5, _out8_14_T_6) @[ALU.scala 186:45]
                      node _out8_14_T_8 = tail(_out8_14_T_7, 1) @[ALU.scala 186:45]
                      node _out8_14_T_9 = asSInt(_out8_14_T_8) @[ALU.scala 186:67]
                      out8[14] <= _out8_14_T_9 @[ALU.scala 186:22]
                      node _out8_15_T_5 = bits(io.V_in_A, 127, 120) @[ALU.scala 187:35]
                      node _out8_15_T_6 = bits(io.V_in_B, 127, 120) @[ALU.scala 187:56]
                      node _out8_15_T_7 = add(_out8_15_T_5, _out8_15_T_6) @[ALU.scala 187:45]
                      node _out8_15_T_8 = tail(_out8_15_T_7, 1) @[ALU.scala 187:45]
                      node _out8_15_T_9 = asSInt(_out8_15_T_8) @[ALU.scala 187:67]
                      out8[15] <= _out8_15_T_9 @[ALU.scala 187:22]
                      node io_V_out_lo_lo_lo_lo_1 = asUInt(out8[0]) @[Cat.scala 30:58]
                      node io_V_out_lo_lo_lo_hi_1 = asUInt(out8[1]) @[Cat.scala 30:58]
                      node io_V_out_lo_lo_lo_3 = cat(io_V_out_lo_lo_lo_hi_1, io_V_out_lo_lo_lo_lo_1) @[Cat.scala 30:58]
                      node io_V_out_lo_lo_hi_lo_1 = asUInt(out8[2]) @[Cat.scala 30:58]
                      node io_V_out_lo_lo_hi_hi_1 = asUInt(out8[3]) @[Cat.scala 30:58]
                      node io_V_out_lo_lo_hi_3 = cat(io_V_out_lo_lo_hi_hi_1, io_V_out_lo_lo_hi_lo_1) @[Cat.scala 30:58]
                      node io_V_out_lo_lo_5 = cat(io_V_out_lo_lo_hi_3, io_V_out_lo_lo_lo_3) @[Cat.scala 30:58]
                      node io_V_out_lo_hi_lo_lo_1 = asUInt(out8[4]) @[Cat.scala 30:58]
                      node io_V_out_lo_hi_lo_hi_1 = asUInt(out8[5]) @[Cat.scala 30:58]
                      node io_V_out_lo_hi_lo_3 = cat(io_V_out_lo_hi_lo_hi_1, io_V_out_lo_hi_lo_lo_1) @[Cat.scala 30:58]
                      node io_V_out_lo_hi_hi_lo_1 = asUInt(out8[6]) @[Cat.scala 30:58]
                      node io_V_out_lo_hi_hi_hi_1 = asUInt(out8[7]) @[Cat.scala 30:58]
                      node io_V_out_lo_hi_hi_3 = cat(io_V_out_lo_hi_hi_hi_1, io_V_out_lo_hi_hi_lo_1) @[Cat.scala 30:58]
                      node io_V_out_lo_hi_5 = cat(io_V_out_lo_hi_hi_3, io_V_out_lo_hi_lo_3) @[Cat.scala 30:58]
                      node io_V_out_lo_7 = cat(io_V_out_lo_hi_5, io_V_out_lo_lo_5) @[Cat.scala 30:58]
                      node io_V_out_hi_lo_lo_lo_1 = asUInt(out8[8]) @[Cat.scala 30:58]
                      node io_V_out_hi_lo_lo_hi_1 = asUInt(out8[9]) @[Cat.scala 30:58]
                      node io_V_out_hi_lo_lo_3 = cat(io_V_out_hi_lo_lo_hi_1, io_V_out_hi_lo_lo_lo_1) @[Cat.scala 30:58]
                      node io_V_out_hi_lo_hi_lo_1 = asUInt(out8[10]) @[Cat.scala 30:58]
                      node io_V_out_hi_lo_hi_hi_1 = asUInt(out8[11]) @[Cat.scala 30:58]
                      node io_V_out_hi_lo_hi_3 = cat(io_V_out_hi_lo_hi_hi_1, io_V_out_hi_lo_hi_lo_1) @[Cat.scala 30:58]
                      node io_V_out_hi_lo_5 = cat(io_V_out_hi_lo_hi_3, io_V_out_hi_lo_lo_3) @[Cat.scala 30:58]
                      node io_V_out_hi_hi_lo_lo_1 = asUInt(out8[12]) @[Cat.scala 30:58]
                      node io_V_out_hi_hi_lo_hi_1 = asUInt(out8[13]) @[Cat.scala 30:58]
                      node io_V_out_hi_hi_lo_3 = cat(io_V_out_hi_hi_lo_hi_1, io_V_out_hi_hi_lo_lo_1) @[Cat.scala 30:58]
                      node io_V_out_hi_hi_hi_lo_1 = asUInt(out8[14]) @[Cat.scala 30:58]
                      node io_V_out_hi_hi_hi_hi_1 = asUInt(out8[15]) @[Cat.scala 30:58]
                      node io_V_out_hi_hi_hi_3 = cat(io_V_out_hi_hi_hi_hi_1, io_V_out_hi_hi_hi_lo_1) @[Cat.scala 30:58]
                      node io_V_out_hi_hi_5 = cat(io_V_out_hi_hi_hi_3, io_V_out_hi_hi_lo_3) @[Cat.scala 30:58]
                      node io_V_out_hi_7 = cat(io_V_out_hi_hi_5, io_V_out_hi_lo_5) @[Cat.scala 30:58]
                      node _io_V_out_T_14 = cat(io_V_out_hi_7, io_V_out_lo_7) @[Cat.scala 30:58]
                      node _io_V_out_T_15 = asSInt(_io_V_out_T_14) @[ALU.scala 188:181]
                      io.V_out <= _io_V_out_T_15 @[ALU.scala 188:22]
                      skip @[ALU.scala 171:46]
                    else : @[ALU.scala 189:21]
                      io.V_out <= asSInt(UInt<1>("h00")) @[ALU.scala 190:22]
                      skip @[ALU.scala 189:21]
              skip @[ALU.scala 150:70]
            else : @[ALU.scala 193:42]
              node _T_19 = eq(io.alu_Op, UInt<9>("h0bc")) @[ALU.scala 193:27]
              when _T_19 : @[ALU.scala 193:42]
                node m_hi = mux(UInt<1>("h00"), UInt<96>("h0ffffffffffffffffffffffff"), UInt<96>("h00")) @[Bitwise.scala 72:12]
                node m_lo = asUInt(io.in_A) @[Cat.scala 30:58]
                node _m_T = cat(m_hi, m_lo) @[Cat.scala 30:58]
                node m = asSInt(_m_T) @[ALU.scala 194:45]
                io.V_out <= m @[ALU.scala 195:18]
                skip @[ALU.scala 193:42]
              else : @[ALU.scala 197:17]
                io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 198:16]
                io.V_out <= asSInt(UInt<1>("h00")) @[ALU.scala 199:18]
                skip @[ALU.scala 197:17]
        skip @[ALU.scala 91:31]
      else : @[ALU.scala 203:13]
        io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 204:12]
        io.V_out <= asSInt(UInt<1>("h00")) @[ALU.scala 205:14]
        skip @[ALU.scala 203:13]
    
  module BranchControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip fnct3 : UInt<3>, flip branch : UInt<1>, flip arg_x : SInt<32>, flip arg_y : SInt<32>, br_taken : UInt<1>}
    
    node _T = eq(io.branch, UInt<1>("h01")) @[BRANCH.scala 15:16]
    when _T : @[BRANCH.scala 15:24]
      node _T_1 = eq(io.fnct3, UInt<1>("h00")) @[BRANCH.scala 17:21]
      when _T_1 : @[BRANCH.scala 17:31]
        node _io_br_taken_T = eq(io.arg_x, io.arg_y) @[BRANCH.scala 18:33]
        io.br_taken <= _io_br_taken_T @[BRANCH.scala 18:21]
        skip @[BRANCH.scala 17:31]
      else : @[BRANCH.scala 20:37]
        node _T_2 = eq(io.fnct3, UInt<1>("h01")) @[BRANCH.scala 20:27]
        when _T_2 : @[BRANCH.scala 20:37]
          node _io_br_taken_T_1 = neq(io.arg_x, io.arg_y) @[BRANCH.scala 21:33]
          io.br_taken <= _io_br_taken_T_1 @[BRANCH.scala 21:21]
          skip @[BRANCH.scala 20:37]
        else : @[BRANCH.scala 23:37]
          node _T_3 = eq(io.fnct3, UInt<3>("h04")) @[BRANCH.scala 23:27]
          when _T_3 : @[BRANCH.scala 23:37]
            node _io_br_taken_T_2 = lt(io.arg_x, io.arg_y) @[BRANCH.scala 24:33]
            io.br_taken <= _io_br_taken_T_2 @[BRANCH.scala 24:21]
            skip @[BRANCH.scala 23:37]
          else : @[BRANCH.scala 26:37]
            node _T_4 = eq(io.fnct3, UInt<3>("h05")) @[BRANCH.scala 26:27]
            when _T_4 : @[BRANCH.scala 26:37]
              node _io_br_taken_T_3 = geq(io.arg_x, io.arg_y) @[BRANCH.scala 27:33]
              io.br_taken <= _io_br_taken_T_3 @[BRANCH.scala 27:21]
              skip @[BRANCH.scala 26:37]
            else : @[BRANCH.scala 29:37]
              node _T_5 = eq(io.fnct3, UInt<3>("h07")) @[BRANCH.scala 29:27]
              when _T_5 : @[BRANCH.scala 29:37]
                node _io_br_taken_T_4 = geq(io.arg_x, io.arg_y) @[BRANCH.scala 30:34]
                io.br_taken <= _io_br_taken_T_4 @[BRANCH.scala 30:21]
                skip @[BRANCH.scala 29:37]
              else : @[BRANCH.scala 32:37]
                node _T_6 = eq(io.fnct3, UInt<3>("h06")) @[BRANCH.scala 32:27]
                when _T_6 : @[BRANCH.scala 32:37]
                  node _io_br_taken_T_5 = leq(io.arg_x, io.arg_y) @[BRANCH.scala 33:34]
                  io.br_taken <= _io_br_taken_T_5 @[BRANCH.scala 33:21]
                  skip @[BRANCH.scala 32:37]
                else : @[BRANCH.scala 34:16]
                  io.br_taken <= UInt<1>("h00") @[BRANCH.scala 35:21]
                  skip @[BRANCH.scala 34:16]
      skip @[BRANCH.scala 15:24]
    else : @[BRANCH.scala 38:12]
      io.br_taken <= UInt<1>("h00") @[BRANCH.scala 39:17]
      skip @[BRANCH.scala 38:12]
    
  module DataMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, flip dataIn : SInt<32>, flip mem_read : UInt<1>, flip mem_write : UInt<1>, dataOut : SInt<32>}
    
    cmem imem1 : SInt<32>[1024] @[DATA_MEM.scala 14:17]
    io.dataOut <= asSInt(UInt<1>("h00")) @[DATA_MEM.scala 16:12]
    node _T = eq(io.mem_write, UInt<1>("h01")) @[DATA_MEM.scala 18:21]
    when _T : @[DATA_MEM.scala 18:30]
      node _T_1 = bits(io.addr, 9, 0)
      write mport MPORT = imem1[_T_1], clock
      MPORT <= io.dataIn
      skip @[DATA_MEM.scala 18:30]
    node _T_2 = eq(io.mem_read, UInt<1>("h01")) @[DATA_MEM.scala 22:20]
    when _T_2 : @[DATA_MEM.scala 22:30]
      node _io_dataOut_T = bits(io.addr, 9, 0) @[DATA_MEM.scala 23:30]
      read mport io_dataOut_MPORT = imem1[_io_dataOut_T], clock @[DATA_MEM.scala 23:30]
      io.dataOut <= io_dataOut_MPORT @[DATA_MEM.scala 23:16]
      skip @[DATA_MEM.scala 22:30]
    
  module Jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip imme : UInt<32>, flip rdata1 : UInt<32>, out : UInt<32>}
    
    node _a_T = add(io.imme, io.rdata1) @[JALR.scala 12:17]
    node a = tail(_a_T, 1) @[JALR.scala 12:17]
    node b = and(UInt<32>("h0fffffffe"), a) @[JALR.scala 13:23]
    io.out <= b @[JALR.scala 14:8]
    
  module V_Csr : 
    input clock : Clock
    input reset : Reset
    output io : {flip Vtype_inst : UInt<11>, flip vl_writeback : UInt<32>, flip csr_regWrite : UInt<1>, vl_out : UInt<32>, vtype_out : UInt<32>}
    
    node vtype_encod_hi = mux(UInt<1>("h00"), UInt<21>("h01fffff"), UInt<21>("h00")) @[Bitwise.scala 72:12]
    node vtype_encod = cat(vtype_encod_hi, io.Vtype_inst) @[Cat.scala 30:58]
    reg vtypeReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[V_CSR.scala 18:23]
    node _T = eq(io.csr_regWrite, UInt<1>("h01")) @[V_CSR.scala 20:23]
    when _T : @[V_CSR.scala 20:32]
      vtypeReg <= vtype_encod @[V_CSR.scala 21:14]
      skip @[V_CSR.scala 20:32]
    reg vlReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[V_CSR.scala 24:20]
    vlReg <= io.vl_writeback @[V_CSR.scala 25:7]
    io.vl_out <= vlReg @[V_CSR.scala 27:11]
    io.vtype_out <= vtypeReg @[V_CSR.scala 28:14]
    
  module Vlmax : 
    input clock : Clock
    input reset : Reset
    output io : {flip v_lmul : UInt<3>, flip v_sew : UInt<3>, vlmax : UInt<32>}
    
    wire lmul : UInt<4> @[VLMAX.scala 14:16]
    wire sew : UInt<7> @[VLMAX.scala 15:15]
    node _T = eq(io.v_lmul, UInt<1>("h00")) @[VLMAX.scala 18:17]
    when _T : @[VLMAX.scala 18:31]
      lmul <= UInt<1>("h01") @[VLMAX.scala 19:10]
      skip @[VLMAX.scala 18:31]
    else : @[VLMAX.scala 20:37]
      node _T_1 = eq(io.v_lmul, UInt<1>("h01")) @[VLMAX.scala 20:23]
      when _T_1 : @[VLMAX.scala 20:37]
        lmul <= UInt<2>("h02") @[VLMAX.scala 21:10]
        skip @[VLMAX.scala 20:37]
      else : @[VLMAX.scala 22:37]
        node _T_2 = eq(io.v_lmul, UInt<2>("h02")) @[VLMAX.scala 22:23]
        when _T_2 : @[VLMAX.scala 22:37]
          lmul <= UInt<3>("h04") @[VLMAX.scala 23:10]
          skip @[VLMAX.scala 22:37]
        else : @[VLMAX.scala 24:37]
          node _T_3 = eq(io.v_lmul, UInt<2>("h03")) @[VLMAX.scala 24:23]
          when _T_3 : @[VLMAX.scala 24:37]
            lmul <= UInt<4>("h08") @[VLMAX.scala 25:10]
            skip @[VLMAX.scala 24:37]
          else : @[VLMAX.scala 26:13]
            lmul <= UInt<1>("h00") @[VLMAX.scala 27:10]
            skip @[VLMAX.scala 26:13]
    node _T_4 = eq(io.v_sew, UInt<1>("h00")) @[VLMAX.scala 31:16]
    when _T_4 : @[VLMAX.scala 31:30]
      sew <= UInt<4>("h08") @[VLMAX.scala 32:9]
      skip @[VLMAX.scala 31:30]
    else : @[VLMAX.scala 33:36]
      node _T_5 = eq(io.v_sew, UInt<1>("h01")) @[VLMAX.scala 33:22]
      when _T_5 : @[VLMAX.scala 33:36]
        sew <= UInt<5>("h010") @[VLMAX.scala 34:9]
        skip @[VLMAX.scala 33:36]
      else : @[VLMAX.scala 35:36]
        node _T_6 = eq(io.v_sew, UInt<2>("h02")) @[VLMAX.scala 35:22]
        when _T_6 : @[VLMAX.scala 35:36]
          sew <= UInt<6>("h020") @[VLMAX.scala 36:9]
          skip @[VLMAX.scala 35:36]
        else : @[VLMAX.scala 37:36]
          node _T_7 = eq(io.v_sew, UInt<2>("h03")) @[VLMAX.scala 37:22]
          when _T_7 : @[VLMAX.scala 37:36]
            sew <= UInt<7>("h040") @[VLMAX.scala 38:9]
            skip @[VLMAX.scala 37:36]
          else : @[VLMAX.scala 39:13]
            sew <= UInt<1>("h00") @[VLMAX.scala 40:9]
            skip @[VLMAX.scala 39:13]
    node _T_8 = eq(lmul, UInt<1>("h01")) @[VLMAX.scala 45:12]
    node _T_9 = eq(sew, UInt<4>("h08")) @[VLMAX.scala 45:27]
    node _T_10 = and(_T_8, _T_9) @[VLMAX.scala 45:20]
    when _T_10 : @[VLMAX.scala 45:36]
      io.vlmax <= UInt<5>("h010") @[VLMAX.scala 46:14]
      skip @[VLMAX.scala 45:36]
    else : @[VLMAX.scala 47:42]
      node _T_11 = eq(lmul, UInt<2>("h02")) @[VLMAX.scala 47:18]
      node _T_12 = eq(sew, UInt<4>("h08")) @[VLMAX.scala 47:33]
      node _T_13 = and(_T_11, _T_12) @[VLMAX.scala 47:26]
      when _T_13 : @[VLMAX.scala 47:42]
        io.vlmax <= UInt<6>("h020") @[VLMAX.scala 48:14]
        skip @[VLMAX.scala 47:42]
      else : @[VLMAX.scala 49:42]
        node _T_14 = eq(lmul, UInt<3>("h04")) @[VLMAX.scala 49:18]
        node _T_15 = eq(sew, UInt<4>("h08")) @[VLMAX.scala 49:33]
        node _T_16 = and(_T_14, _T_15) @[VLMAX.scala 49:26]
        when _T_16 : @[VLMAX.scala 49:42]
          io.vlmax <= UInt<7>("h040") @[VLMAX.scala 50:14]
          skip @[VLMAX.scala 49:42]
        else : @[VLMAX.scala 51:42]
          node _T_17 = eq(lmul, UInt<4>("h08")) @[VLMAX.scala 51:18]
          node _T_18 = eq(sew, UInt<4>("h08")) @[VLMAX.scala 51:33]
          node _T_19 = and(_T_17, _T_18) @[VLMAX.scala 51:26]
          when _T_19 : @[VLMAX.scala 51:42]
            io.vlmax <= UInt<8>("h080") @[VLMAX.scala 52:14]
            skip @[VLMAX.scala 51:42]
          else : @[VLMAX.scala 53:43]
            node _T_20 = eq(lmul, UInt<1>("h01")) @[VLMAX.scala 53:18]
            node _T_21 = eq(sew, UInt<5>("h010")) @[VLMAX.scala 53:33]
            node _T_22 = and(_T_20, _T_21) @[VLMAX.scala 53:26]
            when _T_22 : @[VLMAX.scala 53:43]
              io.vlmax <= UInt<4>("h08") @[VLMAX.scala 54:14]
              skip @[VLMAX.scala 53:43]
            else : @[VLMAX.scala 55:43]
              node _T_23 = eq(lmul, UInt<2>("h02")) @[VLMAX.scala 55:18]
              node _T_24 = eq(sew, UInt<5>("h010")) @[VLMAX.scala 55:33]
              node _T_25 = and(_T_23, _T_24) @[VLMAX.scala 55:26]
              when _T_25 : @[VLMAX.scala 55:43]
                io.vlmax <= UInt<5>("h010") @[VLMAX.scala 56:14]
                skip @[VLMAX.scala 55:43]
              else : @[VLMAX.scala 57:43]
                node _T_26 = eq(lmul, UInt<3>("h04")) @[VLMAX.scala 57:18]
                node _T_27 = eq(sew, UInt<5>("h010")) @[VLMAX.scala 57:33]
                node _T_28 = and(_T_26, _T_27) @[VLMAX.scala 57:26]
                when _T_28 : @[VLMAX.scala 57:43]
                  io.vlmax <= UInt<6>("h020") @[VLMAX.scala 58:14]
                  skip @[VLMAX.scala 57:43]
                else : @[VLMAX.scala 59:43]
                  node _T_29 = eq(lmul, UInt<4>("h08")) @[VLMAX.scala 59:18]
                  node _T_30 = eq(sew, UInt<5>("h010")) @[VLMAX.scala 59:33]
                  node _T_31 = and(_T_29, _T_30) @[VLMAX.scala 59:26]
                  when _T_31 : @[VLMAX.scala 59:43]
                    io.vlmax <= UInt<7>("h040") @[VLMAX.scala 60:14]
                    skip @[VLMAX.scala 59:43]
                  else : @[VLMAX.scala 61:43]
                    node _T_32 = eq(lmul, UInt<1>("h01")) @[VLMAX.scala 61:18]
                    node _T_33 = eq(sew, UInt<6>("h020")) @[VLMAX.scala 61:33]
                    node _T_34 = and(_T_32, _T_33) @[VLMAX.scala 61:26]
                    when _T_34 : @[VLMAX.scala 61:43]
                      io.vlmax <= UInt<3>("h04") @[VLMAX.scala 62:14]
                      skip @[VLMAX.scala 61:43]
                    else : @[VLMAX.scala 63:43]
                      node _T_35 = eq(lmul, UInt<2>("h02")) @[VLMAX.scala 63:18]
                      node _T_36 = eq(sew, UInt<6>("h020")) @[VLMAX.scala 63:33]
                      node _T_37 = and(_T_35, _T_36) @[VLMAX.scala 63:26]
                      when _T_37 : @[VLMAX.scala 63:43]
                        io.vlmax <= UInt<4>("h08") @[VLMAX.scala 64:14]
                        skip @[VLMAX.scala 63:43]
                      else : @[VLMAX.scala 65:43]
                        node _T_38 = eq(lmul, UInt<3>("h04")) @[VLMAX.scala 65:18]
                        node _T_39 = eq(sew, UInt<6>("h020")) @[VLMAX.scala 65:33]
                        node _T_40 = and(_T_38, _T_39) @[VLMAX.scala 65:26]
                        when _T_40 : @[VLMAX.scala 65:43]
                          io.vlmax <= UInt<5>("h010") @[VLMAX.scala 66:14]
                          skip @[VLMAX.scala 65:43]
                        else : @[VLMAX.scala 67:43]
                          node _T_41 = eq(lmul, UInt<4>("h08")) @[VLMAX.scala 67:18]
                          node _T_42 = eq(sew, UInt<6>("h020")) @[VLMAX.scala 67:33]
                          node _T_43 = and(_T_41, _T_42) @[VLMAX.scala 67:26]
                          when _T_43 : @[VLMAX.scala 67:43]
                            io.vlmax <= UInt<6>("h020") @[VLMAX.scala 68:14]
                            skip @[VLMAX.scala 67:43]
                          else : @[VLMAX.scala 69:43]
                            node _T_44 = eq(lmul, UInt<1>("h01")) @[VLMAX.scala 69:18]
                            node _T_45 = eq(sew, UInt<7>("h040")) @[VLMAX.scala 69:33]
                            node _T_46 = and(_T_44, _T_45) @[VLMAX.scala 69:26]
                            when _T_46 : @[VLMAX.scala 69:43]
                              io.vlmax <= UInt<2>("h02") @[VLMAX.scala 70:14]
                              skip @[VLMAX.scala 69:43]
                            else : @[VLMAX.scala 71:43]
                              node _T_47 = eq(lmul, UInt<2>("h02")) @[VLMAX.scala 71:18]
                              node _T_48 = eq(sew, UInt<7>("h040")) @[VLMAX.scala 71:33]
                              node _T_49 = and(_T_47, _T_48) @[VLMAX.scala 71:26]
                              when _T_49 : @[VLMAX.scala 71:43]
                                io.vlmax <= UInt<3>("h04") @[VLMAX.scala 72:14]
                                skip @[VLMAX.scala 71:43]
                              else : @[VLMAX.scala 73:43]
                                node _T_50 = eq(lmul, UInt<3>("h04")) @[VLMAX.scala 73:18]
                                node _T_51 = eq(sew, UInt<7>("h040")) @[VLMAX.scala 73:33]
                                node _T_52 = and(_T_50, _T_51) @[VLMAX.scala 73:26]
                                when _T_52 : @[VLMAX.scala 73:43]
                                  io.vlmax <= UInt<4>("h08") @[VLMAX.scala 74:14]
                                  skip @[VLMAX.scala 73:43]
                                else : @[VLMAX.scala 75:43]
                                  node _T_53 = eq(lmul, UInt<4>("h08")) @[VLMAX.scala 75:18]
                                  node _T_54 = eq(sew, UInt<7>("h040")) @[VLMAX.scala 75:33]
                                  node _T_55 = and(_T_53, _T_54) @[VLMAX.scala 75:26]
                                  when _T_55 : @[VLMAX.scala 75:43]
                                    io.vlmax <= UInt<5>("h010") @[VLMAX.scala 76:14]
                                    skip @[VLMAX.scala 75:43]
                                  else : @[VLMAX.scala 77:13]
                                    io.vlmax <= UInt<1>("h00") @[VLMAX.scala 78:14]
                                    skip @[VLMAX.scala 77:13]
    
  module V_RegFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip vs1 : UInt<5>, flip vs2 : UInt<5>, flip V_reg_write : UInt<1>, flip vd : UInt<5>, flip V_w_data : SInt<128>, vdata1 : SInt<128>, vdata2 : SInt<128>}
    
    wire _register_WIRE : SInt<128>[32] @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[0] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[1] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[2] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[3] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[4] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[5] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[6] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[7] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[8] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[9] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[10] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[11] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[12] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[13] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[14] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[15] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[16] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[17] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[18] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[19] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[20] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[21] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[22] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[23] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[24] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[25] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[26] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[27] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[28] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[29] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[30] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    _register_WIRE[31] <= asSInt(UInt<128>("h00")) @[VECTOR_REGISTER.scala 20:31]
    reg register : SInt<128>[32], clock with : (reset => (reset, _register_WIRE)) @[VECTOR_REGISTER.scala 20:23]
    io.vdata1 <= register[io.vs1] @[VECTOR_REGISTER.scala 22:11]
    io.vdata2 <= register[io.vs2] @[VECTOR_REGISTER.scala 23:11]
    when io.V_reg_write : @[VECTOR_REGISTER.scala 25:25]
      register[io.vd] <= io.V_w_data @[VECTOR_REGISTER.scala 26:24]
      skip @[VECTOR_REGISTER.scala 25:25]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : SInt<4>}
    
    inst PC_module of PC @[RISC5.scala 11:23]
    PC_module.clock <= clock
    PC_module.reset <= reset
    inst Program_Counter_module of Program_Counter @[RISC5.scala 12:36]
    Program_Counter_module.clock <= clock
    Program_Counter_module.reset <= reset
    inst InstMem1_module of InstMem1 @[RISC5.scala 13:30]
    InstMem1_module.clock <= clock
    InstMem1_module.reset <= reset
    inst Control_module of Control @[RISC5.scala 14:28]
    Control_module.clock <= clock
    Control_module.reset <= reset
    inst Immde_module of Immde @[RISC5.scala 15:27]
    Immde_module.clock <= clock
    Immde_module.reset <= reset
    inst RegFile_module of RegFile @[RISC5.scala 16:28]
    RegFile_module.clock <= clock
    RegFile_module.reset <= reset
    inst Alu_Control_module of Alu_Control @[RISC5.scala 17:32]
    Alu_Control_module.clock <= clock
    Alu_Control_module.reset <= reset
    inst ALU_1_module of ALU_1 @[RISC5.scala 18:26]
    ALU_1_module.clock <= clock
    ALU_1_module.reset <= reset
    inst Branch_module of BranchControl @[RISC5.scala 19:27]
    Branch_module.clock <= clock
    Branch_module.reset <= reset
    inst DataMem_module of DataMem @[RISC5.scala 20:28]
    DataMem_module.clock <= clock
    DataMem_module.reset <= reset
    inst Jalr_module of Jalr @[RISC5.scala 21:25]
    Jalr_module.clock <= clock
    Jalr_module.reset <= reset
    inst V_Csr_module of V_Csr @[RISC5.scala 22:26]
    V_Csr_module.clock <= clock
    V_Csr_module.reset <= reset
    inst Vlmax_module of Vlmax @[RISC5.scala 23:26]
    Vlmax_module.clock <= clock
    Vlmax_module.reset <= reset
    inst V_RegFile_module of V_RegFile @[RISC5.scala 24:30]
    V_RegFile_module.clock <= clock
    V_RegFile_module.reset <= reset
    node _Program_Counter_module_io_pc_T = asUInt(PC_module.io.out) @[RISC5.scala 29:50]
    Program_Counter_module.io.pc <= _Program_Counter_module_io_pc_T @[RISC5.scala 29:30]
    node _InstMem1_module_io_addr_T = bits(PC_module.io.out, 21, 2) @[RISC5.scala 30:44]
    InstMem1_module.io.addr <= _InstMem1_module_io_addr_T @[RISC5.scala 30:25]
    node _Immde_module_io_pc_T = asUInt(PC_module.io.out) @[RISC5.scala 31:40]
    Immde_module.io.pc <= _Immde_module_io_pc_T @[RISC5.scala 31:20]
    node _Control_module_io_opcode_T = bits(InstMem1_module.io.data, 6, 0) @[RISC5.scala 34:52]
    Control_module.io.opcode <= _Control_module_io_opcode_T @[RISC5.scala 34:26]
    node _Control_module_io_rs1_no_T = bits(InstMem1_module.io.data, 19, 15) @[RISC5.scala 35:52]
    Control_module.io.rs1_no <= _Control_module_io_rs1_no_T @[RISC5.scala 35:26]
    node _Control_module_io_rd_no_T = bits(InstMem1_module.io.data, 11, 7) @[RISC5.scala 36:51]
    Control_module.io.rd_no <= _Control_module_io_rd_no_T @[RISC5.scala 36:25]
    node _Control_module_io_fun3_T = bits(InstMem1_module.io.data, 14, 12) @[RISC5.scala 37:50]
    Control_module.io.fun3 <= _Control_module_io_fun3_T @[RISC5.scala 37:24]
    node _Control_module_io_fun6_T = bits(InstMem1_module.io.data, 31, 26) @[RISC5.scala 38:50]
    Control_module.io.fun6 <= _Control_module_io_fun6_T @[RISC5.scala 38:24]
    node _RegFile_module_io_rs1_T = eq(Control_module.io.opcode, UInt<6>("h033")) @[RISC5.scala 40:55]
    node _RegFile_module_io_rs1_T_1 = eq(Control_module.io.opcode, UInt<5>("h013")) @[RISC5.scala 40:92]
    node _RegFile_module_io_rs1_T_2 = or(_RegFile_module_io_rs1_T, _RegFile_module_io_rs1_T_1) @[RISC5.scala 40:64]
    node _RegFile_module_io_rs1_T_3 = eq(Control_module.io.opcode, UInt<6>("h023")) @[RISC5.scala 40:129]
    node _RegFile_module_io_rs1_T_4 = or(_RegFile_module_io_rs1_T_2, _RegFile_module_io_rs1_T_3) @[RISC5.scala 40:101]
    node _RegFile_module_io_rs1_T_5 = eq(Control_module.io.opcode, UInt<2>("h03")) @[RISC5.scala 40:166]
    node _RegFile_module_io_rs1_T_6 = or(_RegFile_module_io_rs1_T_4, _RegFile_module_io_rs1_T_5) @[RISC5.scala 40:138]
    node _RegFile_module_io_rs1_T_7 = eq(Control_module.io.opcode, UInt<7>("h063")) @[RISC5.scala 40:202]
    node _RegFile_module_io_rs1_T_8 = or(_RegFile_module_io_rs1_T_6, _RegFile_module_io_rs1_T_7) @[RISC5.scala 40:174]
    node _RegFile_module_io_rs1_T_9 = eq(Control_module.io.opcode, UInt<7>("h067")) @[RISC5.scala 40:239]
    node _RegFile_module_io_rs1_T_10 = or(_RegFile_module_io_rs1_T_8, _RegFile_module_io_rs1_T_9) @[RISC5.scala 40:211]
    node _RegFile_module_io_rs1_T_11 = eq(Control_module.io.opcode, UInt<7>("h057")) @[RISC5.scala 40:277]
    node _RegFile_module_io_rs1_T_12 = eq(Control_module.io.fun3, UInt<3>("h07")) @[RISC5.scala 40:312]
    node _RegFile_module_io_rs1_T_13 = and(_RegFile_module_io_rs1_T_11, _RegFile_module_io_rs1_T_12) @[RISC5.scala 40:286]
    node _RegFile_module_io_rs1_T_14 = or(_RegFile_module_io_rs1_T_10, _RegFile_module_io_rs1_T_13) @[RISC5.scala 40:249]
    node _RegFile_module_io_rs1_T_15 = eq(Control_module.io.opcode, UInt<7>("h057")) @[RISC5.scala 40:348]
    node _RegFile_module_io_rs1_T_16 = eq(Control_module.io.fun3, UInt<3>("h04")) @[RISC5.scala 40:383]
    node _RegFile_module_io_rs1_T_17 = and(_RegFile_module_io_rs1_T_15, _RegFile_module_io_rs1_T_16) @[RISC5.scala 40:357]
    node _RegFile_module_io_rs1_T_18 = or(_RegFile_module_io_rs1_T_14, _RegFile_module_io_rs1_T_17) @[RISC5.scala 40:320]
    node _RegFile_module_io_rs1_T_19 = bits(InstMem1_module.io.data, 19, 15) @[RISC5.scala 40:415]
    node _RegFile_module_io_rs1_T_20 = mux(_RegFile_module_io_rs1_T_18, _RegFile_module_io_rs1_T_19, UInt<1>("h00")) @[RISC5.scala 40:29]
    RegFile_module.io.rs1 <= _RegFile_module_io_rs1_T_20 @[RISC5.scala 40:23]
    node _RegFile_module_io_rs2_T = eq(Control_module.io.opcode, UInt<6>("h033")) @[RISC5.scala 41:55]
    node _RegFile_module_io_rs2_T_1 = eq(Control_module.io.opcode, UInt<6>("h023")) @[RISC5.scala 41:92]
    node _RegFile_module_io_rs2_T_2 = or(_RegFile_module_io_rs2_T, _RegFile_module_io_rs2_T_1) @[RISC5.scala 41:64]
    node _RegFile_module_io_rs2_T_3 = eq(Control_module.io.opcode, UInt<7>("h063")) @[RISC5.scala 41:129]
    node _RegFile_module_io_rs2_T_4 = or(_RegFile_module_io_rs2_T_2, _RegFile_module_io_rs2_T_3) @[RISC5.scala 41:101]
    node _RegFile_module_io_rs2_T_5 = bits(InstMem1_module.io.data, 24, 20) @[RISC5.scala 41:162]
    node _RegFile_module_io_rs2_T_6 = mux(_RegFile_module_io_rs2_T_4, _RegFile_module_io_rs2_T_5, UInt<1>("h00")) @[RISC5.scala 41:29]
    RegFile_module.io.rs2 <= _RegFile_module_io_rs2_T_6 @[RISC5.scala 41:23]
    node _RegFile_module_io_w_reg_T = bits(InstMem1_module.io.data, 11, 7) @[RISC5.scala 42:51]
    RegFile_module.io.w_reg <= _RegFile_module_io_w_reg_T @[RISC5.scala 42:25]
    RegFile_module.io.reg_write <= Control_module.io.reg_write @[RISC5.scala 43:29]
    Immde_module.io.instr <= InstMem1_module.io.data @[RISC5.scala 45:23]
    Immde_module.io.I_instruction <= Control_module.io.is_I @[RISC5.scala 46:31]
    Immde_module.io.V_instruction <= Control_module.io.is_V @[RISC5.scala 47:31]
    node _Alu_Control_module_io_func3_T = bits(InstMem1_module.io.data, 14, 12) @[RISC5.scala 49:55]
    Alu_Control_module.io.func3 <= _Alu_Control_module_io_func3_T @[RISC5.scala 49:29]
    node _Alu_Control_module_io_func7_T = bits(InstMem1_module.io.data, 30, 30) @[RISC5.scala 50:55]
    Alu_Control_module.io.func7 <= _Alu_Control_module_io_func7_T @[RISC5.scala 50:29]
    node _Alu_Control_module_io_func6_T = bits(InstMem1_module.io.data, 31, 26) @[RISC5.scala 51:55]
    Alu_Control_module.io.func6 <= _Alu_Control_module_io_func6_T @[RISC5.scala 51:29]
    Alu_Control_module.io.I_inst <= Control_module.io.is_I @[RISC5.scala 52:30]
    Alu_Control_module.io.V_inst <= Control_module.io.is_V @[RISC5.scala 53:30]
    Alu_Control_module.io.aluOp <= Control_module.io.alu_operation @[RISC5.scala 54:29]
    node _V_Csr_module_io_Vtype_inst_T = eq(Control_module.io.opcode, UInt<7>("h057")) @[RISC5.scala 56:60]
    node _V_Csr_module_io_Vtype_inst_T_1 = eq(Control_module.io.fun3, UInt<3>("h07")) @[RISC5.scala 56:95]
    node _V_Csr_module_io_Vtype_inst_T_2 = and(_V_Csr_module_io_Vtype_inst_T, _V_Csr_module_io_Vtype_inst_T_1) @[RISC5.scala 56:69]
    node _V_Csr_module_io_Vtype_inst_T_3 = bits(InstMem1_module.io.data, 30, 20) @[RISC5.scala 56:127]
    node _V_Csr_module_io_Vtype_inst_T_4 = mux(_V_Csr_module_io_Vtype_inst_T_2, _V_Csr_module_io_Vtype_inst_T_3, UInt<1>("h00")) @[RISC5.scala 56:34]
    V_Csr_module.io.Vtype_inst <= _V_Csr_module_io_Vtype_inst_T_4 @[RISC5.scala 56:28]
    V_Csr_module.io.csr_regWrite <= Control_module.io.csr_reg_write @[RISC5.scala 57:30]
    node _a_T = eq(UInt<1>("h00"), Control_module.io.extend) @[Mux.scala 80:60]
    node _a_T_1 = mux(_a_T, Immde_module.io.I_type, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _a_T_2 = eq(UInt<1>("h01"), Control_module.io.extend) @[Mux.scala 80:60]
    node _a_T_3 = mux(_a_T_2, Immde_module.io.S_type, _a_T_1) @[Mux.scala 80:57]
    node _a_T_4 = eq(UInt<2>("h02"), Control_module.io.extend) @[Mux.scala 80:60]
    node a = mux(_a_T_4, Immde_module.io.U_type, _a_T_3) @[Mux.scala 80:57]
    node _Vlmax_module_io_v_lmul_T = bits(V_Csr_module.io.Vtype_inst, 2, 0) @[RISC5.scala 64:53]
    Vlmax_module.io.v_lmul <= _Vlmax_module_io_v_lmul_T @[RISC5.scala 64:24]
    node _Vlmax_module_io_v_sew_T = bits(V_Csr_module.io.Vtype_inst, 5, 3) @[RISC5.scala 65:52]
    Vlmax_module.io.v_sew <= _Vlmax_module_io_v_sew_T @[RISC5.scala 65:23]
    node _V_RegFile_module_io_vs1_T = eq(Control_module.io.opcode, UInt<7>("h057")) @[RISC5.scala 68:57]
    node _V_RegFile_module_io_vs1_T_1 = eq(Control_module.io.fun3, UInt<1>("h00")) @[RISC5.scala 68:92]
    node _V_RegFile_module_io_vs1_T_2 = and(_V_RegFile_module_io_vs1_T, _V_RegFile_module_io_vs1_T_1) @[RISC5.scala 68:66]
    node _V_RegFile_module_io_vs1_T_3 = bits(InstMem1_module.io.data, 19, 15) @[RISC5.scala 68:124]
    node _V_RegFile_module_io_vs1_T_4 = mux(_V_RegFile_module_io_vs1_T_2, _V_RegFile_module_io_vs1_T_3, UInt<1>("h00")) @[RISC5.scala 68:31]
    V_RegFile_module.io.vs1 <= _V_RegFile_module_io_vs1_T_4 @[RISC5.scala 68:25]
    node _V_RegFile_module_io_vs2_T = eq(Control_module.io.opcode, UInt<7>("h057")) @[RISC5.scala 69:57]
    node _V_RegFile_module_io_vs2_T_1 = eq(Control_module.io.fun3, UInt<2>("h03")) @[RISC5.scala 69:92]
    node _V_RegFile_module_io_vs2_T_2 = and(_V_RegFile_module_io_vs2_T, _V_RegFile_module_io_vs2_T_1) @[RISC5.scala 69:66]
    node _V_RegFile_module_io_vs2_T_3 = eq(Control_module.io.opcode, UInt<7>("h057")) @[RISC5.scala 69:128]
    node _V_RegFile_module_io_vs2_T_4 = eq(Control_module.io.fun3, UInt<1>("h00")) @[RISC5.scala 69:163]
    node _V_RegFile_module_io_vs2_T_5 = and(_V_RegFile_module_io_vs2_T_3, _V_RegFile_module_io_vs2_T_4) @[RISC5.scala 69:137]
    node _V_RegFile_module_io_vs2_T_6 = or(_V_RegFile_module_io_vs2_T_2, _V_RegFile_module_io_vs2_T_5) @[RISC5.scala 69:100]
    node _V_RegFile_module_io_vs2_T_7 = eq(Control_module.io.opcode, UInt<7>("h057")) @[RISC5.scala 69:199]
    node _V_RegFile_module_io_vs2_T_8 = eq(Control_module.io.fun3, UInt<3>("h04")) @[RISC5.scala 69:234]
    node _V_RegFile_module_io_vs2_T_9 = and(_V_RegFile_module_io_vs2_T_7, _V_RegFile_module_io_vs2_T_8) @[RISC5.scala 69:208]
    node _V_RegFile_module_io_vs2_T_10 = or(_V_RegFile_module_io_vs2_T_6, _V_RegFile_module_io_vs2_T_9) @[RISC5.scala 69:171]
    node _V_RegFile_module_io_vs2_T_11 = bits(InstMem1_module.io.data, 24, 20) @[RISC5.scala 69:266]
    node _V_RegFile_module_io_vs2_T_12 = mux(_V_RegFile_module_io_vs2_T_10, _V_RegFile_module_io_vs2_T_11, UInt<1>("h00")) @[RISC5.scala 69:31]
    V_RegFile_module.io.vs2 <= _V_RegFile_module_io_vs2_T_12 @[RISC5.scala 69:25]
    node _V_RegFile_module_io_vd_T = bits(InstMem1_module.io.data, 11, 7) @[RISC5.scala 70:50]
    V_RegFile_module.io.vd <= _V_RegFile_module_io_vd_T @[RISC5.scala 70:24]
    V_RegFile_module.io.V_reg_write <= Control_module.io.reg_write @[RISC5.scala 71:33]
    node _d_T = asSInt(UInt<32>("h0ffffffff")) @[RISC5.scala 82:52]
    node _d_T_1 = asSInt(V_Csr_module.io.vl_out) @[RISC5.scala 83:37]
    node _d_T_2 = eq(UInt<1>("h00"), Control_module.io.avl_ope) @[Mux.scala 80:60]
    node _d_T_3 = mux(_d_T_2, RegFile_module.io.rdata1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _d_T_4 = eq(UInt<1>("h01"), Control_module.io.avl_ope) @[Mux.scala 80:60]
    node _d_T_5 = mux(_d_T_4, _d_T, _d_T_3) @[Mux.scala 80:57]
    node _d_T_6 = eq(UInt<2>("h02"), Control_module.io.avl_ope) @[Mux.scala 80:60]
    node d = mux(_d_T_6, _d_T_1, _d_T_5) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T = asSInt(Program_Counter_module.io.out) @[RISC5.scala 88:44]
    node _ALU_1_module_io_in_A_T_1 = eq(UInt<1>("h00"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_2 = mux(_ALU_1_module_io_in_A_T_1, RegFile_module.io.rdata1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T_3 = eq(UInt<1>("h01"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_4 = mux(_ALU_1_module_io_in_A_T_3, _ALU_1_module_io_in_A_T, _ALU_1_module_io_in_A_T_2) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T_5 = eq(UInt<2>("h02"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_6 = mux(_ALU_1_module_io_in_A_T_5, PC_module.io.out, _ALU_1_module_io_in_A_T_4) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T_7 = eq(UInt<2>("h03"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_8 = mux(_ALU_1_module_io_in_A_T_7, RegFile_module.io.rdata1, _ALU_1_module_io_in_A_T_6) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_A_T_9 = eq(UInt<3>("h04"), Control_module.io.operand_A) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_A_T_10 = mux(_ALU_1_module_io_in_A_T_9, d, _ALU_1_module_io_in_A_T_8) @[Mux.scala 80:57]
    ALU_1_module.io.in_A <= _ALU_1_module_io_in_A_T_10 @[RISC5.scala 86:22]
    node _ALU_1_module_io_in_B_T = asSInt(Vlmax_module.io.vlmax) @[RISC5.scala 97:36]
    node _ALU_1_module_io_in_B_T_1 = eq(UInt<1>("h00"), Control_module.io.operand_B) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_B_T_2 = mux(_ALU_1_module_io_in_B_T_1, RegFile_module.io.rdata2, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_B_T_3 = eq(UInt<1>("h01"), Control_module.io.operand_B) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_B_T_4 = mux(_ALU_1_module_io_in_B_T_3, a, _ALU_1_module_io_in_B_T_2) @[Mux.scala 80:57]
    node _ALU_1_module_io_in_B_T_5 = eq(UInt<2>("h02"), Control_module.io.operand_B) @[Mux.scala 80:60]
    node _ALU_1_module_io_in_B_T_6 = mux(_ALU_1_module_io_in_B_T_5, _ALU_1_module_io_in_B_T, _ALU_1_module_io_in_B_T_4) @[Mux.scala 80:57]
    ALU_1_module.io.in_B <= _ALU_1_module_io_in_B_T_6 @[RISC5.scala 94:22]
    node _ALU_1_module_io_V_in_A_T = eq(UInt<1>("h00"), Control_module.io.V_opeA) @[Mux.scala 80:60]
    node _ALU_1_module_io_V_in_A_T_1 = mux(_ALU_1_module_io_V_in_A_T, asSInt(UInt<1>("h00")), asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _ALU_1_module_io_V_in_A_T_2 = eq(UInt<1>("h01"), Control_module.io.V_opeA) @[Mux.scala 80:60]
    node _ALU_1_module_io_V_in_A_T_3 = mux(_ALU_1_module_io_V_in_A_T_2, V_RegFile_module.io.vdata1, _ALU_1_module_io_V_in_A_T_1) @[Mux.scala 80:57]
    ALU_1_module.io.V_in_A <= _ALU_1_module_io_V_in_A_T_3 @[RISC5.scala 100:24]
    node _ALU_1_module_io_V_in_B_T = eq(UInt<1>("h00"), Control_module.io.V_opeB) @[Mux.scala 80:60]
    node _ALU_1_module_io_V_in_B_T_1 = mux(_ALU_1_module_io_V_in_B_T, asSInt(UInt<1>("h00")), asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _ALU_1_module_io_V_in_B_T_2 = eq(UInt<1>("h01"), Control_module.io.V_opeB) @[Mux.scala 80:60]
    node _ALU_1_module_io_V_in_B_T_3 = mux(_ALU_1_module_io_V_in_B_T_2, V_RegFile_module.io.vdata2, _ALU_1_module_io_V_in_B_T_1) @[Mux.scala 80:57]
    ALU_1_module.io.V_in_B <= _ALU_1_module_io_V_in_B_T_3 @[RISC5.scala 105:24]
    node _ALU_1_module_io_alu_imm_T = eq(UInt<1>("h00"), Control_module.io.V_imm) @[Mux.scala 80:60]
    node _ALU_1_module_io_alu_imm_T_1 = mux(_ALU_1_module_io_alu_imm_T, asSInt(UInt<1>("h00")), asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _ALU_1_module_io_alu_imm_T_2 = eq(UInt<1>("h01"), Control_module.io.V_imm) @[Mux.scala 80:60]
    node _ALU_1_module_io_alu_imm_T_3 = mux(_ALU_1_module_io_alu_imm_T_2, Immde_module.io.V_I_type, _ALU_1_module_io_alu_imm_T_1) @[Mux.scala 80:57]
    ALU_1_module.io.alu_imm <= _ALU_1_module_io_alu_imm_T_3 @[RISC5.scala 110:25]
    ALU_1_module.io.in_I <= Control_module.io.is_I @[RISC5.scala 115:22]
    ALU_1_module.io.in_V <= Control_module.io.is_V @[RISC5.scala 116:22]
    ALU_1_module.io.alu_Op <= Alu_Control_module.io.out @[RISC5.scala 117:24]
    node _ALU_1_module_io_alu_sew_T = bits(V_Csr_module.io.vtype_out, 5, 3) @[RISC5.scala 118:53]
    ALU_1_module.io.alu_sew <= _ALU_1_module_io_alu_sew_T @[RISC5.scala 118:25]
    node _ALU_1_module_io_alu_lmul_T = bits(V_Csr_module.io.vtype_out, 2, 0) @[RISC5.scala 119:54]
    ALU_1_module.io.alu_lmul <= _ALU_1_module_io_alu_lmul_T @[RISC5.scala 119:26]
    node _DataMem_module_io_addr_T = asUInt(ALU_1_module.io.out) @[RISC5.scala 123:47]
    DataMem_module.io.addr <= _DataMem_module_io_addr_T @[RISC5.scala 123:24]
    DataMem_module.io.dataIn <= RegFile_module.io.rdata2 @[RISC5.scala 124:26]
    DataMem_module.io.mem_read <= Control_module.io.mem_read @[RISC5.scala 125:28]
    DataMem_module.io.mem_write <= Control_module.io.mem_write @[RISC5.scala 126:29]
    node c = and(Branch_module.io.br_taken, Control_module.io.branch) @[RISC5.scala 129:35]
    node _b_T = asUInt(Immde_module.io.SB_type) @[RISC5.scala 134:38]
    node _b_T_1 = eq(UInt<1>("h01"), c) @[Mux.scala 80:60]
    node b = mux(_b_T_1, _b_T, Program_Counter_module.io.out) @[Mux.scala 80:57]
    node _PC_module_io_in_T = asSInt(Program_Counter_module.io.out) @[RISC5.scala 138:44]
    node _PC_module_io_in_T_1 = asSInt(b) @[RISC5.scala 139:16]
    node _PC_module_io_in_T_2 = asSInt(Jalr_module.io.out) @[RISC5.scala 141:33]
    node _PC_module_io_in_T_3 = eq(UInt<1>("h01"), Control_module.io.next_pc_sel) @[Mux.scala 80:60]
    node _PC_module_io_in_T_4 = mux(_PC_module_io_in_T_3, _PC_module_io_in_T_1, _PC_module_io_in_T) @[Mux.scala 80:57]
    node _PC_module_io_in_T_5 = eq(UInt<2>("h02"), Control_module.io.next_pc_sel) @[Mux.scala 80:60]
    node _PC_module_io_in_T_6 = mux(_PC_module_io_in_T_5, Immde_module.io.UJ_type, _PC_module_io_in_T_4) @[Mux.scala 80:57]
    node _PC_module_io_in_T_7 = eq(UInt<2>("h03"), Control_module.io.next_pc_sel) @[Mux.scala 80:60]
    node _PC_module_io_in_T_8 = mux(_PC_module_io_in_T_7, _PC_module_io_in_T_2, _PC_module_io_in_T_6) @[Mux.scala 80:57]
    PC_module.io.in <= _PC_module_io_in_T_8 @[RISC5.scala 137:17]
    node _Jalr_module_io_imme_T = asUInt(a) @[RISC5.scala 144:26]
    Jalr_module.io.imme <= _Jalr_module_io_imme_T @[RISC5.scala 144:21]
    node _Jalr_module_io_rdata1_T = asUInt(RegFile_module.io.rdata1) @[RISC5.scala 145:51]
    Jalr_module.io.rdata1 <= _Jalr_module_io_rdata1_T @[RISC5.scala 145:23]
    Branch_module.io.fnct3 <= Alu_Control_module.io.func3 @[RISC5.scala 148:24]
    Branch_module.io.branch <= Control_module.io.branch @[RISC5.scala 149:25]
    Branch_module.io.arg_x <= RegFile_module.io.rdata1 @[RISC5.scala 150:24]
    Branch_module.io.arg_y <= RegFile_module.io.rdata2 @[RISC5.scala 151:24]
    node _RegFile_module_io_w_data_T = eq(UInt<1>("h01"), Control_module.io.men_to_reg) @[Mux.scala 80:60]
    node _RegFile_module_io_w_data_T_1 = mux(_RegFile_module_io_w_data_T, DataMem_module.io.dataOut, ALU_1_module.io.out) @[Mux.scala 80:57]
    RegFile_module.io.w_data <= _RegFile_module_io_w_data_T_1 @[RISC5.scala 154:26]
    node _V_RegFile_module_io_V_w_data_T = eq(UInt<1>("h01"), Control_module.io.V_men_to_reg) @[Mux.scala 80:60]
    node _V_RegFile_module_io_V_w_data_T_1 = mux(_V_RegFile_module_io_V_w_data_T, asSInt(UInt<1>("h00")), ALU_1_module.io.V_out) @[Mux.scala 80:57]
    V_RegFile_module.io.V_w_data <= _V_RegFile_module_io_V_w_data_T_1 @[RISC5.scala 159:30]
    node _V_Csr_module_io_vl_writeback_T = asUInt(ALU_1_module.io.out) @[RISC5.scala 164:53]
    V_Csr_module.io.vl_writeback <= _V_Csr_module_io_vl_writeback_T @[RISC5.scala 164:30]
    io.out <= asSInt(UInt<1>("h00")) @[RISC5.scala 168:8]
    
